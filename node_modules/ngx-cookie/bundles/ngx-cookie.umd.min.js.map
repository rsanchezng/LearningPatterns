{"version":3,"sources":["ng://ngx-cookie/lib/utils.ts","ng://ngx-cookie/lib/cookie-options-provider.ts","ng://ngx-cookie/lib/cookie.service.ts","ng://ngx-cookie/lib/cookie-backend.service.ts","ng://ngx-cookie/lib/cookie.factory.ts","ng://ngx-cookie/lib/cookie.module.ts"],"names":["isBlank","obj","undefined","isPresent","isString","mergeOptions","oldOptions","newOptions","path","domain","expires","secure","storeUnencoded","safeDecodeURIComponent","str","decodeURIComponent","e","safeJsonParse","JSON","parse","COOKIE_OPTIONS","InjectionToken","CookieOptionsProvider","options","_injector","this","defaultOptions","get","APP_BASE_HREF","httpOnly","_options","Object","defineProperty","prototype","Injectable","Inject","args","Injector","CookieService","_optionsProvider","document","cookie","val","key","_cookieReader","getObject","value","getAll","put","_cookieWriter","putObject","stringify","remove","removeAll","_this","cookies","keys","forEach","cookieArray","i","index","name","lastCookies","lastCookieString","currentCookieString","cookieString","split","length","indexOf","substring","that","_buildCookieString","opts","Date","cookieValue","encodeURIComponent","toUTCString","cookieLength","console","log","CookieBackendService","request","response","_super","call","tslib_1.__extends","headers","cookieServiceFactory","cookieOptionsProvider","CookieModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","forChild","NgModule"],"mappings":"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","sourcesContent":["import { CookieOptions } from './cookie-options.model';\n\nexport function isBlank(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isPresent(obj: any): boolean {\n  return obj !== undefined && obj !== null;\n}\n\nexport function isString(obj: any): obj is string {\n  return typeof obj === 'string';\n}\n\nexport function mergeOptions(oldOptions: CookieOptions, newOptions?: CookieOptions): CookieOptions {\n  if (!newOptions) {\n    return oldOptions;\n  }\n  return {\n    path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n    domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n    expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n    secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n    storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded,\n  };\n}\n\nexport function safeDecodeURIComponent(str: string) {\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n\nexport function safeJsonParse(str: string) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return str;\n  }\n}\n","import { Inject, Injectable, InjectionToken, Injector } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\n\nimport { CookieOptions } from './cookie-options.model';\nimport { mergeOptions } from './utils';\n\nexport const COOKIE_OPTIONS = new InjectionToken<CookieOptions>('COOKIE_OPTIONS');\n\n@Injectable()\nexport class CookieOptionsProvider {\n\n  private defaultOptions: CookieOptions;\n  private _options: CookieOptions;\n\n  constructor(\n    @Inject(COOKIE_OPTIONS) options: CookieOptions = {},\n    private _injector: Injector\n  ) {\n    this.defaultOptions = {\n      path: this._injector.get(APP_BASE_HREF, '/'),\n      domain: null,\n      expires: null,\n      secure: false,\n      httpOnly: false\n    };\n    this._options = mergeOptions(this.defaultOptions, options);\n  }\n\n  get options(): CookieOptions {\n    return this._options;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { CookieOptionsProvider } from './cookie-options-provider';\nimport { CookieOptions } from './cookie-options.model';\nimport { isBlank, isString, mergeOptions, safeDecodeURIComponent, safeJsonParse } from './utils';\n\ndeclare interface Document {\n  cookie: string;\n}\ndeclare const document: Document;\n\nexport interface ICookieService {\n  get(key: string): string;\n  getObject(key: string): Object;\n  getAll(): Object;\n  put(key: string, value: string, options?: CookieOptions): void;\n  putObject(key: string, value: Object, options?: CookieOptions): void;\n  remove(key: string, options?: CookieOptions): void;\n  removeAll(options?: CookieOptions): void;\n}\n\n@Injectable()\nexport class CookieService implements ICookieService {\n\n  protected options: CookieOptions;\n\n  protected get cookieString(): string {\n    return document.cookie || '';\n  }\n\n  protected set cookieString(val: string) {\n    document.cookie = val;\n  }\n\n  constructor(private _optionsProvider: CookieOptionsProvider) {\n    this.options = this._optionsProvider.options;\n  }\n\n  /**\n   * @name CookieService#get\n   *\n   * @description\n   * Returns the value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Raw cookie value.\n   */\n  get(key: string): string {\n    return (<any>this._cookieReader())[key];\n  }\n\n  /**\n   * @name CookieService#getObject\n   *\n   * @description\n   * Returns the deserialized value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Deserialized cookie value.\n   */\n  getObject(key: string): Object {\n    const value = this.get(key);\n    return value ? safeJsonParse(value) : value;\n  }\n\n  /**\n   * @name CookieService#getAll\n   *\n   * @description\n   * Returns a key value object with all the cookies.\n   *\n   * @returns All cookies\n   */\n  getAll(): Object {\n    return <any>this._cookieReader();\n  }\n\n  /**\n   * @name CookieService#put\n   *\n   * @description\n   * Sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Raw value to be stored.\n   * @param options (Optional) Options object.\n   */\n  put(key: string, value: string, options?: CookieOptions) {\n    this._cookieWriter()(key, value, options);\n  }\n\n  /**\n   * @name CookieService#putObject\n   *\n   * @description\n   * Serializes and sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Value to be stored.\n   * @param options (Optional) Options object.\n   */\n  putObject(key: string, value: Object, options?: CookieOptions) {\n    this.put(key, JSON.stringify(value), options);\n  }\n\n  /**\n   * @name CookieService#remove\n   *\n   * @description\n   * Remove given cookie.\n   *\n   * @param key Id of the key-value pair to delete.\n   * @param options (Optional) Options object.\n   */\n  remove(key: string, options?: CookieOptions): void {\n    this._cookieWriter()(key, undefined, options);\n  }\n\n  /**\n   * @name CookieService#removeAll\n   *\n   * @description\n   * Remove all cookies.\n   */\n  removeAll(options?: CookieOptions): void {\n    const cookies = this.getAll();\n    Object.keys(cookies).forEach(key => {\n      this.remove(key, options);\n    });\n  }\n\n  private _cookieReader(): Object {\n    let lastCookies = {};\n    let lastCookieString = '';\n    let cookieArray: string[], cookie: string, i: number, index: number, name: string;\n    const currentCookieString = this.cookieString;\n    if (currentCookieString !== lastCookieString) {\n      lastCookieString = currentCookieString;\n      cookieArray = lastCookieString.split('; ');\n      lastCookies = {};\n      for (i = 0; i < cookieArray.length; i++) {\n        cookie = cookieArray[i];\n        index = cookie.indexOf('=');\n        if (index > 0) {  // ignore nameless cookies\n          name = safeDecodeURIComponent(cookie.substring(0, index));\n          // the first value that is seen for a cookie is the most\n          // specific one.  values for the same cookie name that\n          // follow are for less specific paths.\n          if (isBlank((<any>lastCookies)[name])) {\n            (<any>lastCookies)[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n          }\n        }\n      }\n    }\n    return lastCookies;\n  }\n\n  private _cookieWriter() {\n    const that = this;\n\n    return function (name: string, value: string, options?: CookieOptions) {\n      that.cookieString = that._buildCookieString(name, value, options);\n    };\n  }\n\n  private _buildCookieString(name: string, value: string, options?: CookieOptions): string {\n    const opts: CookieOptions = mergeOptions(this.options, options);\n    let expires: any = opts.expires;\n    if (isBlank(value)) {\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n      value = '';\n    }\n    if (isString(expires)) {\n      expires = new Date(expires);\n    }\n    const cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);\n    let str = encodeURIComponent(name) + '=' + cookieValue;\n    str += opts.path ? ';path=' + opts.path : '';\n    str += opts.domain ? ';domain=' + opts.domain : '';\n    str += expires ? ';expires=' + expires.toUTCString() : '';\n    str += opts.secure ? ';secure' : '';\n    str += opts.httpOnly ? '; HttpOnly' : '';\n\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n    // - 300 cookies\n    // - 20 cookies per unique domain\n    // - 4096 bytes per cookie\n    const cookieLength = str.length + 1;\n    if (cookieLength > 4096) {\n      console.log(`Cookie \\'${name}\\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);\n    }\n    return str;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport { CookieService } from './cookie.service';\nimport { CookieOptionsProvider } from './cookie-options-provider';\n\n@Injectable()\nexport class CookieBackendService extends CookieService {\n\n  constructor(\n    @Inject('REQUEST') private request: any,\n    @Inject('RESPONSE') private response: any,\n    _optionsProvider: CookieOptionsProvider\n  ) {\n    super(_optionsProvider);\n  }\n\n  protected get cookieString(): string {\n    return this.request.headers.cookie || '';\n  }\n\n  protected set cookieString(val: string) {\n    this.request.headers.cookie = val;\n    this.response.headers.cookie = val;\n  }\n}\n","import { CookieService } from './cookie.service';\nimport { CookieOptionsProvider } from './cookie-options-provider';\n\nexport function cookieServiceFactory(cookieOptionsProvider: CookieOptionsProvider): CookieService {\n  return new CookieService(cookieOptionsProvider);\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CookieOptionsProvider, COOKIE_OPTIONS } from './cookie-options-provider';\nimport { CookieService } from './cookie.service';\nimport { CookieOptions } from './cookie-options.model';\nimport { cookieServiceFactory } from './cookie.factory';\n\n@NgModule({\n  providers: [CookieOptionsProvider]\n})\nexport class CookieModule {\n  /**\n   * Use this method in your root module to provide the CookieService\n   */\n  static forRoot(options: CookieOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider]}\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(options: CookieOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider]}\n      ]\n    };\n  }\n}\n"]}