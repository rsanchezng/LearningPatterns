import * as tslib_1 from "tslib";
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { JhiThreadModalComponent } from './jhi-metrics-modal-threads.component';
var JhiJvmThreadsComponent = /** @class */ (function () {
    function JhiJvmThreadsComponent(modalService) {
        this.modalService = modalService;
    }
    JhiJvmThreadsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.threadStats = {
            threadDumpRunnable: 0,
            threadDumpWaiting: 0,
            threadDumpTimedWaiting: 0,
            threadDumpBlocked: 0,
            threadDumpAll: 0
        };
        this.threadData.forEach(function (value) {
            if (value.threadState === 'RUNNABLE') {
                _this.threadStats.threadDumpRunnable += 1;
            }
            else if (value.threadState === 'WAITING') {
                _this.threadStats.threadDumpWaiting += 1;
            }
            else if (value.threadState === 'TIMED_WAITING') {
                _this.threadStats.threadDumpTimedWaiting += 1;
            }
            else if (value.threadState === 'BLOCKED') {
                _this.threadStats.threadDumpBlocked += 1;
            }
        });
        this.threadStats.threadDumpAll =
            this.threadStats.threadDumpRunnable +
                this.threadStats.threadDumpWaiting +
                this.threadStats.threadDumpTimedWaiting +
                this.threadStats.threadDumpBlocked;
    };
    JhiJvmThreadsComponent.prototype.open = function () {
        var modalRef = this.modalService.open(JhiThreadModalComponent);
        modalRef.componentInstance.threadDump = this.threadData;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], JhiJvmThreadsComponent.prototype, "threadData", void 0);
    JhiJvmThreadsComponent = tslib_1.__decorate([
        Component({
            selector: 'jhi-jvm-threads',
            template: "\n        <h4 jhiTranslate=\"metrics.jvm.threads.title\">Threads</h4>\n        <span><span jhiTranslate=\"metrics.jvm.threads.runnable\">Runnable</span> {{ threadStats.threadDumpRunnable }}</span>\n        <ngb-progressbar\n            [value]=\"threadStats.threadDumpRunnable\"\n            [max]=\"threadStats.threadDumpAll\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"success\"\n        >\n            <span>{{ (threadStats.threadDumpRunnable * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n        </ngb-progressbar>\n        <span><span jhiTranslate=\"metrics.jvm.threads.timedwaiting\">Timed Waiting</span> ({{ threadStats.threadDumpTimedWaiting }})</span>\n        <ngb-progressbar\n            [value]=\"threadStats.threadDumpTimedWaiting\"\n            [max]=\"threadStats.threadDumpAll\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"warning\"\n        >\n            <span>{{ (threadStats.threadDumpTimedWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n        </ngb-progressbar>\n        <span><span jhiTranslate=\"metrics.jvm.threads.waiting\">Waiting</span> ({{ threadStats.threadDumpWaiting }})</span>\n        <ngb-progressbar\n            [value]=\"threadStats.threadDumpWaiting\"\n            [max]=\"threadStats.threadDumpAll\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"warning\"\n        >\n            <span>{{ (threadStats.threadDumpWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n        </ngb-progressbar>\n        <span><span jhiTranslate=\"metrics.jvm.threads.blocked\">Blocked</span> ({{ threadStats.threadDumpBlocked }})</span>\n        <ngb-progressbar\n            [value]=\"threadStats.threadDumpBlocked\"\n            [max]=\"threadStats.threadDumpAll\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"success\"\n        >\n            <span>{{ (threadStats.threadDumpBlocked * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n        </ngb-progressbar>\n        <div>Total: {{ threadStats.threadDumpAll }}</div>\n        <button class=\"hand btn btn-primary btn-sm\" (click)=\"open()\" data-toggle=\"modal\" data-target=\"#threadDump\">\n            <span>Expand</span>\n        </button>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [NgbModal])
    ], JhiJvmThreadsComponent);
    return JhiJvmThreadsComponent;
}());
export { JhiJvmThreadsComponent };
//# sourceMappingURL=data:application/json;base64,