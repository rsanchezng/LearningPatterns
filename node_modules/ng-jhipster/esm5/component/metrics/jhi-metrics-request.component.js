import * as tslib_1 from "tslib";
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Component, Input } from '@angular/core';
var JhiMetricsHttpRequestComponent = /** @class */ (function () {
    function JhiMetricsHttpRequestComponent() {
    }
    JhiMetricsHttpRequestComponent.prototype.filterNaN = function (input) {
        if (isNaN(input)) {
            return 0;
        }
        return input;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], JhiMetricsHttpRequestComponent.prototype, "requestMetrics", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], JhiMetricsHttpRequestComponent.prototype, "updating", void 0);
    JhiMetricsHttpRequestComponent = tslib_1.__decorate([
        Component({
            selector: 'jhi-metrics-request',
            template: "\n        <h3 jhiTranslate=\"metrics.jvm.http.title\">HTTP requests (time in millisecond)</h3>\n        <table class=\"table table-striped\" *ngIf=\"!updating\">\n            <thead>\n                <tr>\n                    <th jhiTranslate=\"metrics.jvm.http.table.code\">Code</th>\n                    <th jhiTranslate=\"metrics.jvm.http.table.count\">Count</th>\n                    <th class=\"text-right\" jhiTranslate=\"metrics.jvm.http.table.mean\">Mean</th>\n                    <th class=\"text-right\" jhiTranslate=\"metrics.jvm.http.table.max\">Max</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let entry of (requestMetrics['percode'] | keys)\">\n                    <td>{{ entry.key }}</td>\n                    <td>\n                        <ngb-progressbar\n                            [max]=\"requestMetrics['all'].count\"\n                            [value]=\"entry.value.count\"\n                            [striped]=\"true\"\n                            [animated]=\"false\"\n                            type=\"success\"\n                        >\n                            <span>{{ entry.value.count }}</span>\n                        </ngb-progressbar>\n                    </td>\n                    <td class=\"text-right\">\n                        {{ filterNaN(entry.value.mean) | number: '1.0-2' }}\n                    </td>\n                    <td class=\"text-right\">{{ entry.value.max | number: '1.0-2' }}</td>\n                </tr>\n            </tbody>\n        </table>\n    "
        })
    ], JhiMetricsHttpRequestComponent);
    return JhiMetricsHttpRequestComponent;
}());
export { JhiMetricsHttpRequestComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamhpLW1ldHJpY3MtcmVxdWVzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1qaGlwc3Rlci8iLCJzb3VyY2VzIjpbImNvbXBvbmVudC9tZXRyaWNzL2poaS1tZXRyaWNzLXJlcXVlc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQXNDakQ7SUFBQTtJQWlCQSxDQUFDO0lBTkcsa0RBQVMsR0FBVCxVQUFVLEtBQUs7UUFDWCxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNkLE9BQU8sQ0FBQyxDQUFDO1NBQ1o7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBWlE7UUFBUixLQUFLLEVBQUU7OzBFQUFvQjtJQUtuQjtRQUFSLEtBQUssRUFBRTs7b0VBQW1CO0lBVGxCLDhCQUE4QjtRQXBDMUMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLHFCQUFxQjtZQUMvQixRQUFRLEVBQUUsc2lEQWdDVDtTQUNKLENBQUM7T0FDVyw4QkFBOEIsQ0FpQjFDO0lBQUQscUNBQUM7Q0FBQSxBQWpCRCxJQWlCQztTQWpCWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIENvcHlyaWdodCAyMDEzLTIwMTkgdGhlIG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzIGZyb20gdGhlIEpIaXBzdGVyIHByb2plY3QuXG5cbiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgSkhpcHN0ZXIgcHJvamVjdCwgc2VlIGh0dHBzOi8vd3d3LmpoaXBzdGVyLnRlY2gvXG4gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdqaGktbWV0cmljcy1yZXF1ZXN0JyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8aDMgamhpVHJhbnNsYXRlPVwibWV0cmljcy5qdm0uaHR0cC50aXRsZVwiPkhUVFAgcmVxdWVzdHMgKHRpbWUgaW4gbWlsbGlzZWNvbmQpPC9oMz5cbiAgICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtc3RyaXBlZFwiICpuZ0lmPVwiIXVwZGF0aW5nXCI+XG4gICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICA8dGggamhpVHJhbnNsYXRlPVwibWV0cmljcy5qdm0uaHR0cC50YWJsZS5jb2RlXCI+Q29kZTwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0aCBqaGlUcmFuc2xhdGU9XCJtZXRyaWNzLmp2bS5odHRwLnRhYmxlLmNvdW50XCI+Q291bnQ8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJ0ZXh0LXJpZ2h0XCIgamhpVHJhbnNsYXRlPVwibWV0cmljcy5qdm0uaHR0cC50YWJsZS5tZWFuXCI+TWVhbjwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cInRleHQtcmlnaHRcIiBqaGlUcmFuc2xhdGU9XCJtZXRyaWNzLmp2bS5odHRwLnRhYmxlLm1heFwiPk1heDwvdGg+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgPHRyICpuZ0Zvcj1cImxldCBlbnRyeSBvZiAocmVxdWVzdE1ldHJpY3NbJ3BlcmNvZGUnXSB8IGtleXMpXCI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD57eyBlbnRyeS5rZXkgfX08L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bmdiLXByb2dyZXNzYmFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW21heF09XCJyZXF1ZXN0TWV0cmljc1snYWxsJ10uY291bnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt2YWx1ZV09XCJlbnRyeS52YWx1ZS5jb3VudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3N0cmlwZWRdPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2FuaW1hdGVkXT1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwic3VjY2Vzc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgZW50cnkudmFsdWUuY291bnQgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L25nYi1wcm9ncmVzc2Jhcj5cbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1yaWdodFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3sgZmlsdGVyTmFOKGVudHJ5LnZhbHVlLm1lYW4pIHwgbnVtYmVyOiAnMS4wLTInIH19XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInRleHQtcmlnaHRcIj57eyBlbnRyeS52YWx1ZS5tYXggfCBudW1iZXI6ICcxLjAtMicgfX08L3RkPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgIGBcbn0pXG5leHBvcnQgY2xhc3MgSmhpTWV0cmljc0h0dHBSZXF1ZXN0Q29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBvYmplY3QgY29udGFpbmluZyBodHRwIHJlcXVlc3QgcmVsYXRlZCBtZXRyaWNzXG4gICAgICovXG4gICAgQElucHV0KCkgcmVxdWVzdE1ldHJpY3M6IHt9O1xuXG4gICAgLyoqXG4gICAgICogYm9vbGVhbiBmaWVsZCBzYXlpbmcgaWYgdGhlIG1ldHJpY3MgYXJlIGluIHRoZSBwcm9jZXNzIG9mIGJlaW5nIHVwZGF0ZWRcbiAgICAgKi9cbiAgICBASW5wdXQoKSB1cGRhdGluZzogYm9vbGVhbjtcblxuICAgIGZpbHRlck5hTihpbnB1dCkge1xuICAgICAgICBpZiAoaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxufVxuIl19