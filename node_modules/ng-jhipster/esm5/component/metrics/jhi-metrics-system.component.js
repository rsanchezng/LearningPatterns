import * as tslib_1 from "tslib";
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Component, Input } from '@angular/core';
var JhiMetricsSystemComponent = /** @class */ (function () {
    function JhiMetricsSystemComponent() {
    }
    JhiMetricsSystemComponent.prototype.convertMillisecondsToDuration = function (ms) {
        var times = {
            year: 31557600000,
            month: 2629746000,
            day: 86400000,
            hour: 3600000,
            minute: 60000,
            second: 1000
        };
        var timeString = '';
        for (var key in times) {
            if (Math.floor(ms / times[key]) > 0) {
                var plural = '';
                if (Math.floor(ms / times[key]) > 1) {
                    plural = 's';
                }
                timeString += Math.floor(ms / times[key]).toString() + ' ' + key.toString() + plural + ' ';
                ms = ms - times[key] * Math.floor(ms / times[key]);
            }
        }
        return timeString;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], JhiMetricsSystemComponent.prototype, "systemMetrics", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], JhiMetricsSystemComponent.prototype, "updating", void 0);
    JhiMetricsSystemComponent = tslib_1.__decorate([
        Component({
            selector: 'jhi-metrics-system',
            template: "\n        <h4>System</h4>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-4\">Uptime</div>\n            <div class=\"col-md-8 text-right\">{{ convertMillisecondsToDuration(systemMetrics['process.uptime']) }}</div>\n        </div>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-4\">Start time</div>\n            <div class=\"col-md-8 text-right\">{{ systemMetrics['process.start.time'] | date: 'full' }}</div>\n        </div>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">Process CPU usage</div>\n            <div class=\"col-md-3 text-right\">{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</div>\n        </div>\n        <ngb-progressbar\n            [value]=\"100 * systemMetrics['process.cpu.usage']\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"success\"\n            *ngIf=\"!updating\"\n        >\n            <span>{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</span>\n        </ngb-progressbar>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">System CPU usage</div>\n            <div class=\"col-md-3 text-right\">{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</div>\n        </div>\n        <ngb-progressbar\n            [value]=\"100 * systemMetrics['system.cpu.usage']\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"success\"\n            *ngIf=\"!updating\"\n        >\n            <span>{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</span>\n        </ngb-progressbar>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">System CPU count</div>\n            <div class=\"col-md-3 text-right\">{{ systemMetrics['system.cpu.count'] }}</div>\n        </div>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">System 1m Load average</div>\n            <div class=\"col-md-3 text-right\">{{ systemMetrics['system.load.average.1m'] | number: '1.0-2' }}</div>\n        </div>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">Process files max</div>\n            <div class=\"col-md-3 text-right\">{{ systemMetrics['process.files.max'] | number: '1.0-0' }}</div>\n        </div>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">Process files open</div>\n            <div class=\"col-md-3 text-right\">{{ systemMetrics['process.files.open'] | number: '1.0-0' }}</div>\n        </div>\n    "
        })
    ], JhiMetricsSystemComponent);
    return JhiMetricsSystemComponent;
}());
export { JhiMetricsSystemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamhpLW1ldHJpY3Mtc3lzdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWpoaXBzdGVyLyIsInNvdXJjZXMiOlsiY29tcG9uZW50L21ldHJpY3MvamhpLW1ldHJpY3Mtc3lzdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0gsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUEwRGpEO0lBQUE7SUFpQ0EsQ0FBQztJQXRCRyxpRUFBNkIsR0FBN0IsVUFBOEIsRUFBRTtRQUM1QixJQUFNLEtBQUssR0FBRztZQUNWLElBQUksRUFBRSxXQUFXO1lBQ2pCLEtBQUssRUFBRSxVQUFVO1lBQ2pCLEdBQUcsRUFBRSxRQUFRO1lBQ2IsSUFBSSxFQUFFLE9BQU87WUFDYixNQUFNLEVBQUUsS0FBSztZQUNiLE1BQU0sRUFBRSxJQUFJO1NBQ2YsQ0FBQztRQUNGLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNwQixLQUFLLElBQU0sR0FBRyxJQUFJLEtBQUssRUFBRTtZQUNyQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDakMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO2dCQUNoQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDakMsTUFBTSxHQUFHLEdBQUcsQ0FBQztpQkFDaEI7Z0JBQ0QsVUFBVSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQztnQkFDM0YsRUFBRSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDdEQ7U0FDSjtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUM7SUE1QlE7UUFBUixLQUFLLEVBQUU7O29FQUFtQjtJQUtsQjtRQUFSLEtBQUssRUFBRTs7K0RBQW1CO0lBVGxCLHlCQUF5QjtRQXhEckMsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG9CQUFvQjtZQUM5QixRQUFRLEVBQUUscWxGQW9EVDtTQUNKLENBQUM7T0FDVyx5QkFBeUIsQ0FpQ3JDO0lBQUQsZ0NBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQWpDWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIENvcHlyaWdodCAyMDEzLTIwMTkgdGhlIG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzIGZyb20gdGhlIEpIaXBzdGVyIHByb2plY3QuXG5cbiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgSkhpcHN0ZXIgcHJvamVjdCwgc2VlIGh0dHBzOi8vd3d3LmpoaXBzdGVyLnRlY2gvXG4gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdqaGktbWV0cmljcy1zeXN0ZW0nLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxoND5TeXN0ZW08L2g0PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCIgKm5nSWY9XCIhdXBkYXRpbmdcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtNFwiPlVwdGltZTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC04IHRleHQtcmlnaHRcIj57eyBjb252ZXJ0TWlsbGlzZWNvbmRzVG9EdXJhdGlvbihzeXN0ZW1NZXRyaWNzWydwcm9jZXNzLnVwdGltZSddKSB9fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiICpuZ0lmPVwiIXVwZGF0aW5nXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTRcIj5TdGFydCB0aW1lPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTggdGV4dC1yaWdodFwiPnt7IHN5c3RlbU1ldHJpY3NbJ3Byb2Nlc3Muc3RhcnQudGltZSddIHwgZGF0ZTogJ2Z1bGwnIH19PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCIgKm5nSWY9XCIhdXBkYXRpbmdcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtOVwiPlByb2Nlc3MgQ1BVIHVzYWdlPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTMgdGV4dC1yaWdodFwiPnt7IDEwMCAqIHN5c3RlbU1ldHJpY3NbJ3Byb2Nlc3MuY3B1LnVzYWdlJ10gfCBudW1iZXI6ICcxLjAtMicgfX0gJTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPG5nYi1wcm9ncmVzc2JhclxuICAgICAgICAgICAgW3ZhbHVlXT1cIjEwMCAqIHN5c3RlbU1ldHJpY3NbJ3Byb2Nlc3MuY3B1LnVzYWdlJ11cIlxuICAgICAgICAgICAgW3N0cmlwZWRdPVwidHJ1ZVwiXG4gICAgICAgICAgICBbYW5pbWF0ZWRdPVwiZmFsc2VcIlxuICAgICAgICAgICAgdHlwZT1cInN1Y2Nlc3NcIlxuICAgICAgICAgICAgKm5nSWY9XCIhdXBkYXRpbmdcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8c3Bhbj57eyAxMDAgKiBzeXN0ZW1NZXRyaWNzWydwcm9jZXNzLmNwdS51c2FnZSddIHwgbnVtYmVyOiAnMS4wLTInIH19ICU8L3NwYW4+XG4gICAgICAgIDwvbmdiLXByb2dyZXNzYmFyPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCIgKm5nSWY9XCIhdXBkYXRpbmdcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtOVwiPlN5c3RlbSBDUFUgdXNhZ2U8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMyB0ZXh0LXJpZ2h0XCI+e3sgMTAwICogc3lzdGVtTWV0cmljc1snc3lzdGVtLmNwdS51c2FnZSddIHwgbnVtYmVyOiAnMS4wLTInIH19ICU8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxuZ2ItcHJvZ3Jlc3NiYXJcbiAgICAgICAgICAgIFt2YWx1ZV09XCIxMDAgKiBzeXN0ZW1NZXRyaWNzWydzeXN0ZW0uY3B1LnVzYWdlJ11cIlxuICAgICAgICAgICAgW3N0cmlwZWRdPVwidHJ1ZVwiXG4gICAgICAgICAgICBbYW5pbWF0ZWRdPVwiZmFsc2VcIlxuICAgICAgICAgICAgdHlwZT1cInN1Y2Nlc3NcIlxuICAgICAgICAgICAgKm5nSWY9XCIhdXBkYXRpbmdcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8c3Bhbj57eyAxMDAgKiBzeXN0ZW1NZXRyaWNzWydzeXN0ZW0uY3B1LnVzYWdlJ10gfCBudW1iZXI6ICcxLjAtMicgfX0gJTwvc3Bhbj5cbiAgICAgICAgPC9uZ2ItcHJvZ3Jlc3NiYXI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIiAqbmdJZj1cIiF1cGRhdGluZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC05XCI+U3lzdGVtIENQVSBjb3VudDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0zIHRleHQtcmlnaHRcIj57eyBzeXN0ZW1NZXRyaWNzWydzeXN0ZW0uY3B1LmNvdW50J10gfX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIiAqbmdJZj1cIiF1cGRhdGluZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC05XCI+U3lzdGVtIDFtIExvYWQgYXZlcmFnZTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0zIHRleHQtcmlnaHRcIj57eyBzeXN0ZW1NZXRyaWNzWydzeXN0ZW0ubG9hZC5hdmVyYWdlLjFtJ10gfCBudW1iZXI6ICcxLjAtMicgfX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIiAqbmdJZj1cIiF1cGRhdGluZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC05XCI+UHJvY2VzcyBmaWxlcyBtYXg8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMyB0ZXh0LXJpZ2h0XCI+e3sgc3lzdGVtTWV0cmljc1sncHJvY2Vzcy5maWxlcy5tYXgnXSB8IG51bWJlcjogJzEuMC0wJyB9fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiICpuZ0lmPVwiIXVwZGF0aW5nXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTlcIj5Qcm9jZXNzIGZpbGVzIG9wZW48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMyB0ZXh0LXJpZ2h0XCI+e3sgc3lzdGVtTWV0cmljc1sncHJvY2Vzcy5maWxlcy5vcGVuJ10gfCBudW1iZXI6ICcxLjAtMCcgfX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgYFxufSlcbmV4cG9ydCBjbGFzcyBKaGlNZXRyaWNzU3lzdGVtQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBvYmplY3QgY29udGFpbmluZyB0aHJlYWQgcmVsYXRlZCBtZXRyaWNzXG4gICAgICovXG4gICAgQElucHV0KCkgc3lzdGVtTWV0cmljczoge307XG5cbiAgICAvKipcbiAgICAgKiBib29sZWFuIGZpZWxkIHNheWluZyBpZiB0aGUgbWV0cmljcyBhcmUgaW4gdGhlIHByb2Nlc3Mgb2YgYmVpbmcgdXBkYXRlZFxuICAgICAqL1xuICAgIEBJbnB1dCgpIHVwZGF0aW5nOiBib29sZWFuO1xuXG4gICAgY29udmVydE1pbGxpc2Vjb25kc1RvRHVyYXRpb24obXMpIHtcbiAgICAgICAgY29uc3QgdGltZXMgPSB7XG4gICAgICAgICAgICB5ZWFyOiAzMTU1NzYwMDAwMCxcbiAgICAgICAgICAgIG1vbnRoOiAyNjI5NzQ2MDAwLFxuICAgICAgICAgICAgZGF5OiA4NjQwMDAwMCxcbiAgICAgICAgICAgIGhvdXI6IDM2MDAwMDAsXG4gICAgICAgICAgICBtaW51dGU6IDYwMDAwLFxuICAgICAgICAgICAgc2Vjb25kOiAxMDAwXG4gICAgICAgIH07XG4gICAgICAgIGxldCB0aW1lU3RyaW5nID0gJyc7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRpbWVzKSB7XG4gICAgICAgICAgICBpZiAoTWF0aC5mbG9vcihtcyAvIHRpbWVzW2tleV0pID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBwbHVyYWwgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5mbG9vcihtcyAvIHRpbWVzW2tleV0pID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBwbHVyYWwgPSAncyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRpbWVTdHJpbmcgKz0gTWF0aC5mbG9vcihtcyAvIHRpbWVzW2tleV0pLnRvU3RyaW5nKCkgKyAnICcgKyBrZXkudG9TdHJpbmcoKSArIHBsdXJhbCArICcgJztcbiAgICAgICAgICAgICAgICBtcyA9IG1zIC0gdGltZXNba2V5XSAqIE1hdGguZmxvb3IobXMgLyB0aW1lc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGltZVN0cmluZztcbiAgICB9XG59XG4iXX0=