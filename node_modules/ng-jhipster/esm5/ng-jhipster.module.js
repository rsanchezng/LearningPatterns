import * as tslib_1 from "tslib";
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { NgModule, Sanitizer } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { MissingTranslationHandler, TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { JhiThreadModalComponent } from './component/metrics/jhi-metrics-modal-threads.component';
import { JhiModuleConfig } from './config';
import { JhiConfigService } from './config.service';
import { JHI_COMPONENTS, JHI_DIRECTIVES, JHI_PIPES } from './jhi-components';
import { JhiMissingTranslationHandler } from './language/jhi-missing-translation.config';
import { JhiTranslateDirective } from './language/jhi-translate.directive';
import { JhiLanguageService } from './language/language.service';
import { JhiAlertService } from './service/alert.service';
import { JhiPaginationUtil } from './service/pagination-util.service';
import { JhiResolvePagingParams } from './service/resolve-paging-params.service';
export function translatePartialLoader(http) {
    return new TranslateHttpLoader(http, 'i18n/', ".json?buildTimestamp=" + process.env.BUILD_TIMESTAMP);
}
export function missingTranslationHandler(configService) {
    return new JhiMissingTranslationHandler(configService);
}
var NgJhipsterModule = /** @class */ (function () {
    function NgJhipsterModule() {
    }
    NgJhipsterModule_1 = NgJhipsterModule;
    NgJhipsterModule.forRoot = function (moduleConfig) {
        return {
            ngModule: NgJhipsterModule_1,
            providers: [
                {
                    provide: JhiLanguageService,
                    useClass: JhiLanguageService,
                    deps: [TranslateService, JhiConfigService]
                },
                {
                    provide: JhiResolvePagingParams,
                    useClass: JhiResolvePagingParams,
                    deps: [JhiPaginationUtil]
                },
                {
                    provide: JhiAlertService,
                    useClass: JhiAlertService,
                    deps: [Sanitizer, JhiConfigService, TranslateService]
                },
                { provide: JhiModuleConfig, useValue: moduleConfig },
                {
                    provide: JhiConfigService,
                    useClass: JhiConfigService,
                    deps: [JhiModuleConfig]
                }
            ]
        };
    };
    NgJhipsterModule.forChild = function (moduleConfig) {
        return {
            ngModule: NgJhipsterModule_1,
            providers: [{ provide: JhiModuleConfig, useValue: moduleConfig }]
        };
    };
    var NgJhipsterModule_1;
    NgJhipsterModule = NgJhipsterModule_1 = tslib_1.__decorate([
        NgModule({
            imports: [
                CommonModule,
                TranslateModule.forRoot({
                    loader: {
                        provide: TranslateLoader,
                        useFactory: translatePartialLoader,
                        deps: [HttpClient]
                    },
                    missingTranslationHandler: {
                        provide: MissingTranslationHandler,
                        useFactory: missingTranslationHandler,
                        deps: [JhiConfigService]
                    }
                }),
                CommonModule,
                NgbModule.forRoot(),
                FormsModule
            ],
            declarations: tslib_1.__spread(JHI_PIPES, JHI_DIRECTIVES, JHI_COMPONENTS, [JhiTranslateDirective]),
            entryComponents: [JhiThreadModalComponent],
            exports: tslib_1.__spread(JHI_PIPES, JHI_DIRECTIVES, JHI_COMPONENTS, [JhiTranslateDirective, TranslateModule, CommonModule])
        })
    ], NgJhipsterModule);
    return NgJhipsterModule;
}());
export { NgJhipsterModule };
//# sourceMappingURL=data:application/json;base64,