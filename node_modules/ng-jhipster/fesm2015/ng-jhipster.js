import { __decorate, __metadata, __param } from 'tslib';
import { ɵɵdefineInjectable, Injectable, ɵɵinject, Input, Component, Directive, forwardRef, EventEmitter, Output, ContentChild, HostListener, Host, ElementRef, Pipe, SecurityContext, Sanitizer, NgModule } from '@angular/core';
import { faSort, faSortUp, faSortDown } from '@fortawesome/free-solid-svg-icons';
import { NG_VALIDATORS, FormsModule } from '@angular/forms';
import { FaIconComponent } from '@fortawesome/angular-fontawesome';
import { TranslateService, TranslateModule, TranslateLoader, MissingTranslationHandler } from '@ngx-translate/core';
import { CommonModule, DatePipe } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { NgbActiveModal, NgbModal, NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { Observable } from 'rxjs';
import { share, filter } from 'rxjs/operators';

let JhiModuleConfig = class JhiModuleConfig {
    constructor() {
        this.sortIcon = faSort;
        this.sortAscIcon = faSortUp;
        this.sortDescIcon = faSortDown;
        this.i18nEnabled = false;
        this.defaultI18nLang = 'en';
        this.noi18nMessage = 'translation-not-found';
        this.alertAsToast = false;
        this.alertTimeout = 5000;
        this.classBadgeTrue = 'badge badge-success';
        this.classBadgeFalse = 'badge badge-danger';
        this.classTrue = 'fa fa-lg fa-check text-success';
        this.classFalse = 'fa fa-lg fa-times text-danger';
    }
};
JhiModuleConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiModuleConfig_Factory() { return new JhiModuleConfig(); }, token: JhiModuleConfig, providedIn: "root" });
JhiModuleConfig = __decorate([
    Injectable({
        providedIn: 'root'
    })
], JhiModuleConfig);

let JhiConfigService = class JhiConfigService {
    constructor(moduleConfig) {
        this.CONFIG_OPTIONS = Object.assign({}, new JhiModuleConfig(), moduleConfig);
    }
    getConfig() {
        return this.CONFIG_OPTIONS;
    }
};
JhiConfigService.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiConfigService_Factory() { return new JhiConfigService(ɵɵinject(JhiModuleConfig)); }, token: JhiConfigService, providedIn: "root" });
JhiConfigService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [JhiModuleConfig])
], JhiConfigService);

/**
 * A component that will take care of item count statistics of a pagination.
 */
let JhiItemCountComponent = class JhiItemCountComponent {
    constructor(config) {
        this.i18nEnabled = config.CONFIG_OPTIONS.i18nEnabled;
    }
    /**
     * "translate-values" JSON of the template
     */
    i18nValues() {
        const first = (this.page - 1) * this.itemsPerPage === 0 ? 1 : (this.page - 1) * this.itemsPerPage + 1;
        const second = this.page * this.itemsPerPage < this.total ? this.page * this.itemsPerPage : this.total;
        return {
            first,
            second,
            total: this.total
        };
    }
};
__decorate([
    Input(),
    __metadata("design:type", Number)
], JhiItemCountComponent.prototype, "page", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], JhiItemCountComponent.prototype, "total", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], JhiItemCountComponent.prototype, "itemsPerPage", void 0);
JhiItemCountComponent = __decorate([
    Component({
        selector: 'jhi-item-count',
        template: `
        <div *ngIf="i18nEnabled; else noI18n" class="info jhi-item-count" jhiTranslate="global.item-count" [translateValues]="i18nValues()">
            /* [attr.translateValues] is used to get entire values in tests */
        </div>
        <ng-template #noI18n class="info jhi-item-count">
            Showing
            {{ (page - 1) * itemsPerPage == 0 ? 1 : (page - 1) * itemsPerPage + 1 }}
            - {{ page * itemsPerPage < total ? page * itemsPerPage : total }} of {{ total }} items.
        </ng-template>
    `
    }),
    __metadata("design:paramtypes", [JhiConfigService])
], JhiItemCountComponent);

/**
 * This component can be used to display a boolean value by defining the @Input attributes
 * If an attribute is not provided, default values will be applied (see JhiModuleConfig class)
 * Have a look at the following examples
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean [value]="inputBooleanVariable"></jhi-boolean>
 *
 * - Display a green check when inputBooleanVariable is true
 * - Display a red cross when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable">
 *     classTrue="fa fa-lg fa-check text-primary"
 *     classFalse="fa fa-lg fa-times text-warning"
 * </jhi-boolean>
 *
 * - Display a blue check when inputBooleanVariable is true
 * - Display an orange cross when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable">
 *     classTrue="fa fa-lg fa-check"
 *     classFalse=""
 * </jhi-boolean>
 *
 * - Display a black check when inputBooleanVariable is true
 * - Do not display anything when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable"
 *     [textTrue]="'userManagement.activated' | translate"
 *     textFalse="deactivated">
 * </jhi-boolean>
 *
 * - Display a green badge when inputBooleanVariable is true
 * - Display a red badge when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="user.activated"
 *     classTrue="badge badge-warning"
 *     classFalse="badge badge-info"
 *     [textTrue]="'userManagement.activated' | translate"
 *     textFalse="deactivated">
 * </jhi-boolean>
 *
 * - Display an orange badge and write 'activated' when inputBooleanVariable is true
 * - Display a blue badge and write 'deactivated' when inputBooleanVariable is false
 */
let JhiBooleanComponent = class JhiBooleanComponent {
    constructor(configService) {
        this.config = configService.getConfig();
    }
    ngOnInit() {
        if (this.textTrue === undefined) {
            if (this.classTrue === undefined) {
                this.classTrue = this.config.classTrue;
            }
        }
        else {
            if (this.classTrue === undefined) {
                this.classTrue = this.config.classBadgeTrue;
            }
        }
        if (this.textFalse === undefined) {
            if (this.classFalse === undefined) {
                this.classFalse = this.config.classFalse;
            }
        }
        else {
            if (this.classFalse === undefined) {
                this.classFalse = this.config.classBadgeFalse;
            }
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JhiBooleanComponent.prototype, "value", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], JhiBooleanComponent.prototype, "classTrue", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], JhiBooleanComponent.prototype, "classFalse", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], JhiBooleanComponent.prototype, "textTrue", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], JhiBooleanComponent.prototype, "textFalse", void 0);
JhiBooleanComponent = __decorate([
    Component({
        selector: 'jhi-boolean',
        template: `
        <span [ngClass]="value ? classTrue : classFalse" [innerHtml]="value ? textTrue : textFalse"> </span>
    `
    }),
    __metadata("design:paramtypes", [JhiConfigService])
], JhiBooleanComponent);

/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
function numberOfBytes(base64String) {
    return (base64String.length / 4) * 3 - paddingSize(base64String);
    function endsWith(suffix, str) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }
    function paddingSize(value) {
        if (endsWith('==', value)) {
            return 2;
        }
        if (endsWith('=', value)) {
            return 1;
        }
        return 0;
    }
}

var JhiMaxbytesValidatorDirective_1;
let JhiMaxbytesValidatorDirective = JhiMaxbytesValidatorDirective_1 = class JhiMaxbytesValidatorDirective {
    constructor() { }
    validate(c) {
        return c.value && numberOfBytes(c.value) > this.jhiMaxbytes
            ? {
                maxbytes: {
                    valid: false
                }
            }
            : null;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Number)
], JhiMaxbytesValidatorDirective.prototype, "jhiMaxbytes", void 0);
JhiMaxbytesValidatorDirective = JhiMaxbytesValidatorDirective_1 = __decorate([
    Directive({
        selector: '[jhiMaxbytes][ngModel]',
        providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMaxbytesValidatorDirective_1), multi: true }]
    }),
    __metadata("design:paramtypes", [])
], JhiMaxbytesValidatorDirective);

var JhiMinbytesValidatorDirective_1;
let JhiMinbytesValidatorDirective = JhiMinbytesValidatorDirective_1 = class JhiMinbytesValidatorDirective {
    constructor() { }
    validate(c) {
        return c.value && numberOfBytes(c.value) < this.jhiMinbytes
            ? {
                minbytes: {
                    valid: false
                }
            }
            : null;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Number)
], JhiMinbytesValidatorDirective.prototype, "jhiMinbytes", void 0);
JhiMinbytesValidatorDirective = JhiMinbytesValidatorDirective_1 = __decorate([
    Directive({
        selector: '[jhiMinbytes][ngModel]',
        providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMinbytesValidatorDirective_1), multi: true }]
    }),
    __metadata("design:paramtypes", [])
], JhiMinbytesValidatorDirective);

var JhiMaxValidatorDirective_1;
let JhiMaxValidatorDirective = JhiMaxValidatorDirective_1 = class JhiMaxValidatorDirective {
    constructor() { }
    validate(c) {
        return c.value === undefined || c.value === null || c.value <= this.jhiMax
            ? null
            : {
                max: {
                    valid: false
                }
            };
    }
};
__decorate([
    Input(),
    __metadata("design:type", Number)
], JhiMaxValidatorDirective.prototype, "jhiMax", void 0);
JhiMaxValidatorDirective = JhiMaxValidatorDirective_1 = __decorate([
    Directive({
        selector: '[jhiMax][ngModel]',
        providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMaxValidatorDirective_1), multi: true }]
    }),
    __metadata("design:paramtypes", [])
], JhiMaxValidatorDirective);

var JhiMinValidatorDirective_1;
let JhiMinValidatorDirective = JhiMinValidatorDirective_1 = class JhiMinValidatorDirective {
    constructor() { }
    validate(c) {
        return c.value === undefined || c.value === null || c.value >= this.jhiMin
            ? null
            : {
                min: {
                    valid: false
                }
            };
    }
};
__decorate([
    Input(),
    __metadata("design:type", Number)
], JhiMinValidatorDirective.prototype, "jhiMin", void 0);
JhiMinValidatorDirective = JhiMinValidatorDirective_1 = __decorate([
    Directive({
        selector: '[jhiMin][ngModel]',
        providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(() => JhiMinValidatorDirective_1), multi: true }]
    }),
    __metadata("design:paramtypes", [])
], JhiMinValidatorDirective);

let JhiSortDirective = class JhiSortDirective {
    constructor() {
        this.predicateChange = new EventEmitter();
        this.ascendingChange = new EventEmitter();
    }
    sort(field) {
        this.ascending = field !== this.predicate ? true : !this.ascending;
        this.predicate = field;
        this.predicateChange.emit(field);
        this.ascendingChange.emit(this.ascending);
        this.callback();
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], JhiSortDirective.prototype, "predicate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JhiSortDirective.prototype, "ascending", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], JhiSortDirective.prototype, "callback", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], JhiSortDirective.prototype, "predicateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], JhiSortDirective.prototype, "ascendingChange", void 0);
JhiSortDirective = __decorate([
    Directive({
        selector: '[jhiSort]'
    }),
    __metadata("design:paramtypes", [])
], JhiSortDirective);

let JhiSortByDirective = class JhiSortByDirective {
    constructor(jhiSort, configService) {
        this.jhiSort = jhiSort;
        this.jhiSort = jhiSort;
        const config = configService.getConfig();
        this.sortIcon = config.sortIcon;
        this.sortAscIcon = config.sortAscIcon;
        this.sortDescIcon = config.sortDescIcon;
    }
    ngAfterContentInit() {
        if (this.jhiSort.predicate && this.jhiSort.predicate !== '_score' && this.jhiSort.predicate === this.jhiSortBy) {
            this.updateIconDefinition(this.iconComponent, this.jhiSort.ascending ? this.sortDescIcon : this.sortAscIcon);
            this.jhiSort.activeIconComponent = this.iconComponent;
        }
    }
    onClick() {
        if (this.jhiSort.predicate && this.jhiSort.predicate !== '_score') {
            this.jhiSort.sort(this.jhiSortBy);
            this.updateIconDefinition(this.jhiSort.activeIconComponent, this.sortIcon);
            this.updateIconDefinition(this.iconComponent, this.jhiSort.ascending ? this.sortDescIcon : this.sortAscIcon);
            this.jhiSort.activeIconComponent = this.iconComponent;
        }
    }
    updateIconDefinition(iconComponent, icon) {
        if (iconComponent) {
            iconComponent.iconProp = icon;
            iconComponent.ngOnChanges({});
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], JhiSortByDirective.prototype, "jhiSortBy", void 0);
__decorate([
    ContentChild(FaIconComponent, { static: true }),
    __metadata("design:type", FaIconComponent)
], JhiSortByDirective.prototype, "iconComponent", void 0);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], JhiSortByDirective.prototype, "onClick", null);
JhiSortByDirective = __decorate([
    Directive({
        selector: '[jhiSortBy]'
    }),
    __param(0, Host()),
    __metadata("design:paramtypes", [JhiSortDirective, JhiConfigService])
], JhiSortByDirective);

/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

let JhiLanguageService = class JhiLanguageService {
    constructor(translateService, configService) {
        this.translateService = translateService;
        this.configService = configService;
        this.currentLang = 'en';
        this.init();
    }
    init() {
        const config = this.configService.getConfig();
        this.currentLang = config.defaultI18nLang;
        this.translateService.setDefaultLang(this.currentLang);
        this.translateService.use(this.currentLang);
    }
    changeLanguage(languageKey) {
        this.currentLang = languageKey;
        this.configService.CONFIG_OPTIONS.defaultI18nLang = languageKey;
        this.translateService.use(this.currentLang);
    }
    getCurrent() {
        return Promise.resolve(this.currentLang);
    }
};
JhiLanguageService.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiLanguageService_Factory() { return new JhiLanguageService(ɵɵinject(TranslateService), ɵɵinject(JhiConfigService)); }, token: JhiLanguageService, providedIn: "root" });
JhiLanguageService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [TranslateService, JhiConfigService])
], JhiLanguageService);

/**
 * A wrapper directive on top of the translate pipe as the inbuilt translate directive from ngx-translate is too verbose and buggy
 */
let JhiTranslateDirective = class JhiTranslateDirective {
    constructor(configService, el, translateService) {
        this.configService = configService;
        this.el = el;
        this.translateService = translateService;
    }
    ngOnInit() {
        const enabled = this.configService.getConfig().i18nEnabled;
        if (enabled) {
            this.translateService.onLangChange.subscribe(() => {
                this.getTranslation();
            });
        }
    }
    ngOnChanges() {
        const enabled = this.configService.getConfig().i18nEnabled;
        if (enabled) {
            this.getTranslation();
        }
    }
    getTranslation() {
        this.translateService.get(this.jhiTranslate, this.translateValues).subscribe(value => {
            this.el.nativeElement.innerHTML = value;
        }, () => {
            return `${this.configService.getConfig().noi18nMessage}[${this.jhiTranslate}]`;
        });
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], JhiTranslateDirective.prototype, "jhiTranslate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], JhiTranslateDirective.prototype, "translateValues", void 0);
JhiTranslateDirective = __decorate([
    Directive({
        selector: '[jhiTranslate]'
    }),
    __metadata("design:paramtypes", [JhiConfigService, ElementRef, TranslateService])
], JhiTranslateDirective);

class JhiMissingTranslationHandler {
    constructor(configService) {
        this.configService = configService;
    }
    handle(params) {
        const key = params.key;
        return `${this.configService.getConfig().noi18nMessage}[${key}]`;
    }
}

/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

let JhiThreadModalComponent = class JhiThreadModalComponent {
    constructor(activeModal) {
        this.activeModal = activeModal;
        this.threadDumpAll = 0;
        this.threadDumpBlocked = 0;
        this.threadDumpRunnable = 0;
        this.threadDumpTimedWaiting = 0;
        this.threadDumpWaiting = 0;
    }
    ngOnInit() {
        this.threadDump.forEach(value => {
            if (value.threadState === 'RUNNABLE') {
                this.threadDumpRunnable += 1;
            }
            else if (value.threadState === 'WAITING') {
                this.threadDumpWaiting += 1;
            }
            else if (value.threadState === 'TIMED_WAITING') {
                this.threadDumpTimedWaiting += 1;
            }
            else if (value.threadState === 'BLOCKED') {
                this.threadDumpBlocked += 1;
            }
        });
        this.threadDumpAll = this.threadDumpRunnable + this.threadDumpWaiting + this.threadDumpTimedWaiting + this.threadDumpBlocked;
    }
    getBadgeClass(threadState) {
        if (threadState === 'RUNNABLE') {
            return 'badge-success';
        }
        else if (threadState === 'WAITING') {
            return 'badge-info';
        }
        else if (threadState === 'TIMED_WAITING') {
            return 'badge-warning';
        }
        else if (threadState === 'BLOCKED') {
            return 'badge-danger';
        }
    }
};
JhiThreadModalComponent = __decorate([
    Component({
        selector: 'jhi-thread-modal',
        template: `
        <div class="modal-header">
            <h4 class="modal-title" jhiTranslate="metrics.jvm.threads.dump.title">Threads dump</h4>
            <button type="button" class="close" (click)="activeModal.dismiss('closed')">&times;</button>
        </div>
        <div class="modal-body">
            <span class="badge badge-primary" (click)="threadDumpFilter = {}">
                All&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpAll }}</span> </span
            >&nbsp;
            <span class="badge badge-success" (click)="threadDumpFilter = { threadState: 'RUNNABLE' }">
                Runnable&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpRunnable }}</span> </span
            >&nbsp;
            <span class="badge badge-info" (click)="threadDumpFilter = { threadState: 'WAITING' }"
                >Waiting&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpWaiting }}</span></span
            >&nbsp;
            <span class="badge badge-warning" (click)="threadDumpFilter = { threadState: 'TIMED_WAITING' }">
                Timed Waiting&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpTimedWaiting }}</span> </span
            >&nbsp;
            <span class="badge badge-danger" (click)="threadDumpFilter = { threadState: 'BLOCKED' }"
                >Blocked&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpBlocked }}</span></span
            >&nbsp;
            <div class="mt-2">&nbsp;</div>
            Filter
            <input type="text" [(ngModel)]="threadDumpFilter" class="form-control" />
            <div class="pad" *ngFor="let entry of (threadDump | pureFilter: threadDumpFilter:'lockName' | keys)">
                <h6>
                    <span class="badge" [ngClass]="getBadgeClass(entry.value.threadState)">{{ entry.value.threadState }}</span
                    >&nbsp;{{ entry.value.threadName }}
                    (ID
                    {{ entry.value.threadId }})
                    <a (click)="entry.show = !entry.show" href="javascript:void(0);">
                        <span [hidden]="entry.show" jhiTranslate="metrics.jvm.threads.dump.show">Show StackTrace</span>
                        <span [hidden]="!entry.show" jhiTranslate="metrics.jvm.threads.dump.hide">Hide StackTrace</span>
                    </a>
                </h6>
                <div class="card" [hidden]="!entry.show">
                    <div class="card-body">
                        <div *ngFor="let st of (entry.value.stackTrace | keys)" class="break">
                            <samp
                                >{{ st.value.className }}.{{ st.value.methodName }}(<code
                                    >{{ st.value.fileName }}:{{ st.value.lineNumber }}</code
                                >)</samp
                            >
                            <span class="mt-1"></span>
                        </div>
                    </div>
                </div>
                <table class="table table-sm table-responsive">
                    <thead>
                        <tr>
                            <th jhiTranslate="metrics.jvm.threads.dump.blockedtime">Blocked Time</th>
                            <th jhiTranslate="metrics.jvm.threads.dump.blockedcount">Blocked Count</th>
                            <th jhiTranslate="metrics.jvm.threads.dump.waitedtime">Waited Time</th>
                            <th jhiTranslate="metrics.jvm.threads.dump.waitedcount">Waited Count</th>
                            <th jhiTranslate="metrics.jvm.threads.dump.lockname">Lock Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>{{ entry.value.blockedTime }}</td>
                            <td>{{ entry.value.blockedCount }}</td>
                            <td>{{ entry.value.waitedTime }}</td>
                            <td>{{ entry.value.waitedCount }}</td>
                            <td class="thread-dump-modal-lock" title="{{ entry.value.lockName }}">
                                <code>{{ entry.value.lockName }}</code>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary float-left" data-dismiss="modal" (click)="activeModal.dismiss('closed')">
                Done
            </button>
        </div>
    `
    }),
    __metadata("design:paramtypes", [NgbActiveModal])
], JhiThreadModalComponent);

let JhiJvmMemoryComponent = class JhiJvmMemoryComponent {
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], JhiJvmMemoryComponent.prototype, "jvmMemoryMetrics", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JhiJvmMemoryComponent.prototype, "updating", void 0);
JhiJvmMemoryComponent = __decorate([
    Component({
        selector: 'jhi-jvm-memory',
        template: `
        <h4 jhiTranslate="metrics.jvm.memory.title">Memory</h4>
        <div *ngIf="!updating">
            <div *ngFor="let entry of (jvmMemoryMetrics | keys)">
                <span *ngIf="entry.value.max != -1; else other">
                    <span>{{ entry.key }}</span> ({{ entry.value.used / 1048576 | number: '1.0-0' }}M /
                    {{ entry.value.max / 1048576 | number: '1.0-0' }}M)
                </span>
                <div>Committed : {{ entry.value.committed / 1048576 | number: '1.0-0' }}M</div>
                <ng-template #other
                    ><span
                        ><span>{{ entry.key }}</span> {{ entry.value.used / 1048576 | number: '1.0-0' }}M</span
                    >
                </ng-template>
                <ngb-progressbar
                    *ngIf="entry.value.max != -1"
                    type="success"
                    [value]="(100 * entry.value.used) / entry.value.max"
                    [striped]="true"
                    [animated]="false"
                >
                    <span>{{ (entry.value.used * 100) / entry.value.max | number: '1.0-0' }}%</span>
                </ngb-progressbar>
            </div>
        </div>
    `
    })
], JhiJvmMemoryComponent);

let JhiJvmThreadsComponent = class JhiJvmThreadsComponent {
    constructor(modalService) {
        this.modalService = modalService;
    }
    ngOnInit() {
        this.threadStats = {
            threadDumpRunnable: 0,
            threadDumpWaiting: 0,
            threadDumpTimedWaiting: 0,
            threadDumpBlocked: 0,
            threadDumpAll: 0
        };
        this.threadData.forEach(value => {
            if (value.threadState === 'RUNNABLE') {
                this.threadStats.threadDumpRunnable += 1;
            }
            else if (value.threadState === 'WAITING') {
                this.threadStats.threadDumpWaiting += 1;
            }
            else if (value.threadState === 'TIMED_WAITING') {
                this.threadStats.threadDumpTimedWaiting += 1;
            }
            else if (value.threadState === 'BLOCKED') {
                this.threadStats.threadDumpBlocked += 1;
            }
        });
        this.threadStats.threadDumpAll =
            this.threadStats.threadDumpRunnable +
                this.threadStats.threadDumpWaiting +
                this.threadStats.threadDumpTimedWaiting +
                this.threadStats.threadDumpBlocked;
    }
    open() {
        const modalRef = this.modalService.open(JhiThreadModalComponent);
        modalRef.componentInstance.threadDump = this.threadData;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], JhiJvmThreadsComponent.prototype, "threadData", void 0);
JhiJvmThreadsComponent = __decorate([
    Component({
        selector: 'jhi-jvm-threads',
        template: `
        <h4 jhiTranslate="metrics.jvm.threads.title">Threads</h4>
        <span><span jhiTranslate="metrics.jvm.threads.runnable">Runnable</span> {{ threadStats.threadDumpRunnable }}</span>
        <ngb-progressbar
            [value]="threadStats.threadDumpRunnable"
            [max]="threadStats.threadDumpAll"
            [striped]="true"
            [animated]="false"
            type="success"
        >
            <span>{{ (threadStats.threadDumpRunnable * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>
        </ngb-progressbar>
        <span><span jhiTranslate="metrics.jvm.threads.timedwaiting">Timed Waiting</span> ({{ threadStats.threadDumpTimedWaiting }})</span>
        <ngb-progressbar
            [value]="threadStats.threadDumpTimedWaiting"
            [max]="threadStats.threadDumpAll"
            [striped]="true"
            [animated]="false"
            type="warning"
        >
            <span>{{ (threadStats.threadDumpTimedWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>
        </ngb-progressbar>
        <span><span jhiTranslate="metrics.jvm.threads.waiting">Waiting</span> ({{ threadStats.threadDumpWaiting }})</span>
        <ngb-progressbar
            [value]="threadStats.threadDumpWaiting"
            [max]="threadStats.threadDumpAll"
            [striped]="true"
            [animated]="false"
            type="warning"
        >
            <span>{{ (threadStats.threadDumpWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>
        </ngb-progressbar>
        <span><span jhiTranslate="metrics.jvm.threads.blocked">Blocked</span> ({{ threadStats.threadDumpBlocked }})</span>
        <ngb-progressbar
            [value]="threadStats.threadDumpBlocked"
            [max]="threadStats.threadDumpAll"
            [striped]="true"
            [animated]="false"
            type="success"
        >
            <span>{{ (threadStats.threadDumpBlocked * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>
        </ngb-progressbar>
        <div>Total: {{ threadStats.threadDumpAll }}</div>
        <button class="hand btn btn-primary btn-sm" (click)="open()" data-toggle="modal" data-target="#threadDump">
            <span>Expand</span>
        </button>
    `
    }),
    __metadata("design:paramtypes", [NgbModal])
], JhiJvmThreadsComponent);

let JhiMetricsCacheComponent = class JhiMetricsCacheComponent {
    filterNaN(input) {
        if (isNaN(input)) {
            return 0;
        }
        return input;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], JhiMetricsCacheComponent.prototype, "cacheMetrics", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JhiMetricsCacheComponent.prototype, "updating", void 0);
JhiMetricsCacheComponent = __decorate([
    Component({
        selector: 'jhi-metrics-cache',
        template: `
        <h3 jhiTranslate="metrics.cache.title">Cache statistics</h3>
        <div class="table-responsive" *ngIf="!updating">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th jhiTranslate="metrics.cache.cachename">Cache name</th>
                        <th class="text-right" data-translate="metrics.cache.hits">Cache Hits</th>
                        <th class="text-right" data-translate="metrics.cache.misses">Cache Misses</th>
                        <th class="text-right" data-translate="metrics.cache.gets">Cache Gets</th>
                        <th class="text-right" data-translate="metrics.cache.puts">Cache Puts</th>
                        <th class="text-right" data-translate="metrics.cache.removals">Cache Removals</th>
                        <th class="text-right" data-translate="metrics.cache.evictions">Cache Evictions</th>
                        <th class="text-right" data-translate="metrics.cache.hitPercent">Cache Hit %</th>
                        <th class="text-right" data-translate="metrics.cache.missPercent">Cache Miss %</th>
                    </tr>
                </thead>
                <tbody>
                    <tr *ngFor="let entry of (cacheMetrics | keys)">
                        <td>{{ entry.key }}</td>
                        <td class="text-right">{{ entry.value['cache.gets.hit'] }}</td>
                        <td class="text-right">{{ entry.value['cache.gets.miss'] }}</td>
                        <td class="text-right">{{ entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'] }}</td>
                        <td class="text-right">{{ entry.value['cache.puts'] }}</td>
                        <td class="text-right">{{ entry.value['cache.removals'] }}</td>
                        <td class="text-right">{{ entry.value['cache.evictions'] }}</td>
                        <td class="text-right">
                            {{
                                filterNaN(
                                    (100 * entry.value['cache.gets.hit']) / (entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'])
                                ) | number: '1.0-4'
                            }}
                        </td>
                        <td class="text-right">
                            {{
                                filterNaN(
                                    (100 * entry.value['cache.gets.miss']) /
                                        (entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'])
                                ) | number: '1.0-4'
                            }}
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    `
    })
], JhiMetricsCacheComponent);

let JhiMetricsDatasourceComponent = class JhiMetricsDatasourceComponent {
    filterNaN(input) {
        if (isNaN(input)) {
            return 0;
        }
        return input;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], JhiMetricsDatasourceComponent.prototype, "datasourceMetrics", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JhiMetricsDatasourceComponent.prototype, "updating", void 0);
JhiMetricsDatasourceComponent = __decorate([
    Component({
        selector: 'jhi-metrics-datasource',
        template: `
        <h3 jhiTranslate="metrics.datasource.title">DataSource statistics (time in millisecond)</h3>
        <div class="table-responsive" *ngIf="!updating">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>
                            <span jhiTranslate="metrics.datasource.usage">Connection Pool Usage</span> (active:
                            {{ datasourceMetrics.active.value }}, min: {{ datasourceMetrics.min.value }}, max:
                            {{ datasourceMetrics.max.value }}, idle: {{ datasourceMetrics.idle.value }})
                        </th>
                        <th class="text-right" jhiTranslate="metrics.datasource.count">Count</th>
                        <th class="text-right" jhiTranslate="metrics.datasource.mean">Mean</th>
                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.min">Min</th>
                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p50">p50</th>
                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p75">p75</th>
                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p95">p95</th>
                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p99">p99</th>
                        <th class="text-right" jhiTranslate="metrics.datasource.max">Max</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Acquire</td>
                        <td class="text-right">{{ datasourceMetrics.acquire.count }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.acquire.mean) | number: '1.0-2' }}</td>
                        <td class="text-right">{{ datasourceMetrics.acquire['0.0'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.acquire['0.5'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.acquire['0.75'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.acquire['0.95'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.acquire['0.99'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.acquire.max) | number: '1.0-2' }}</td>
                    </tr>
                    <tr>
                        <td>Creation</td>
                        <td class="text-right">{{ datasourceMetrics.creation.count }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.creation.mean) | number: '1.0-2' }}</td>
                        <td class="text-right">{{ datasourceMetrics.creation['0.0'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.creation['0.5'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.creation['0.75'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.creation['0.95'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.creation['0.99'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.creation.max) | number: '1.0-2' }}</td>
                    </tr>
                    <tr>
                        <td>Usage</td>
                        <td class="text-right">{{ datasourceMetrics.usage.count }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.usage.mean) | number: '1.0-2' }}</td>
                        <td class="text-right">{{ datasourceMetrics.usage['0.0'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.usage['0.5'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.usage['0.75'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.usage['0.95'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ datasourceMetrics.usage['0.99'] | number: '1.0-3' }}</td>
                        <td class="text-right">{{ filterNaN(datasourceMetrics.usage.max) | number: '1.0-2' }}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    `
    })
], JhiMetricsDatasourceComponent);

let JhiMetricsEndpointsRequestsComponent = class JhiMetricsEndpointsRequestsComponent {
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], JhiMetricsEndpointsRequestsComponent.prototype, "endpointsRequestsMetrics", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JhiMetricsEndpointsRequestsComponent.prototype, "updating", void 0);
JhiMetricsEndpointsRequestsComponent = __decorate([
    Component({
        selector: 'jhi-metrics-endpoints-requests',
        template: `
        <h3>Endpoints requests (time in millisecond)</h3>
        <div class="table-responsive" *ngIf="!updating">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Method</th>
                        <th>Endpoint url</th>
                        <th class="text-right">Count</th>
                        <th class="text-right">Mean</th>
                    </tr>
                </thead>
                <tbody>
                    <ng-container *ngFor="let entry of (endpointsRequestsMetrics | keys)">
                        <tr *ngFor="let method of (entry.value | keys)">
                            <td>{{ method.key }}</td>
                            <td>{{ entry.key }}</td>
                            <td class="text-right">{{ method.value.count }}</td>
                            <td class="text-right">{{ method.value.mean | number: '1.0-3' }}</td>
                        </tr>
                    </ng-container>
                </tbody>
            </table>
        </div>
    `
    })
], JhiMetricsEndpointsRequestsComponent);

let JhiMetricsGarbageCollectorComponent = class JhiMetricsGarbageCollectorComponent {
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], JhiMetricsGarbageCollectorComponent.prototype, "garbageCollectorMetrics", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JhiMetricsGarbageCollectorComponent.prototype, "updating", void 0);
JhiMetricsGarbageCollectorComponent = __decorate([
    Component({
        selector: 'jhi-metrics-garbagecollector',
        template: `
        <div class="row">
            <div class="col-md-4">
                <div *ngIf="garbageCollectorMetrics">
                    <span>
                        GC Live Data Size/GC Max Data Size ({{
                            garbageCollectorMetrics['jvm.gc.live.data.size'] / 1048576 | number: '1.0-0'
                        }}M / {{ garbageCollectorMetrics['jvm.gc.max.data.size'] / 1048576 | number: '1.0-0' }}M)</span
                    >
                    <ngb-progressbar
                        [max]="garbageCollectorMetrics['jvm.gc.max.data.size']"
                        [value]="garbageCollectorMetrics['jvm.gc.live.data.size']"
                        [striped]="true"
                        [animated]="false"
                        type="success"
                    >
                        <span
                            >{{
                                (100 * garbageCollectorMetrics['jvm.gc.live.data.size']) / garbageCollectorMetrics['jvm.gc.max.data.size']
                                    | number: '1.0-2'
                            }}%</span
                        >
                    </ngb-progressbar>
                </div>
            </div>
            <div class="col-md-4">
                <div *ngIf="garbageCollectorMetrics">
                    <span>
                        GC Memory Promoted/GC Memory Allocated ({{
                            garbageCollectorMetrics['jvm.gc.memory.promoted'] / 1048576 | number: '1.0-0'
                        }}M / {{ garbageCollectorMetrics['jvm.gc.memory.allocated'] / 1048576 | number: '1.0-0' }}M)</span
                    >
                    <ngb-progressbar
                        [max]="garbageCollectorMetrics['jvm.gc.memory.allocated']"
                        [value]="garbageCollectorMetrics['jvm.gc.memory.promoted']"
                        [striped]="true"
                        [animated]="false"
                        type="success"
                    >
                        <span
                            >{{
                                (100 * garbageCollectorMetrics['jvm.gc.memory.promoted']) /
                                    garbageCollectorMetrics['jvm.gc.memory.allocated'] | number: '1.0-2'
                            }}%</span
                        >
                    </ngb-progressbar>
                </div>
            </div>
            <div class="col-md-4">
                <div class="row" *ngIf="garbageCollectorMetrics">
                    <div class="col-md-9">Classes loaded</div>
                    <div class="col-md-3 text-right">{{ garbageCollectorMetrics.classesLoaded }}</div>
                </div>
                <div class="row" *ngIf="garbageCollectorMetrics">
                    <div class="col-md-9">Classes unloaded</div>
                    <div class="col-md-3 text-right">{{ garbageCollectorMetrics.classesUnloaded }}</div>
                </div>
            </div>
            <div class="table-responsive" *ngIf="!updating && garbageCollectorMetrics">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th></th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.count">Count</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.mean">Mean</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.min">Min</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p50">p50</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p75">p75</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p95">p95</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p99">p99</th>
                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.max">Max</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>jvm.gc.pause</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause'].count }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause'].mean | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause']['0.0'] | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause']['0.5'] | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause']['0.75'] | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause']['0.95'] | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause']['0.99'] | number: '1.0-3' }}</td>
                            <td class="text-right">{{ garbageCollectorMetrics['jvm.gc.pause'].max | number: '1.0-3' }}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    `
    })
], JhiMetricsGarbageCollectorComponent);

let JhiMetricsHttpRequestComponent = class JhiMetricsHttpRequestComponent {
    filterNaN(input) {
        if (isNaN(input)) {
            return 0;
        }
        return input;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], JhiMetricsHttpRequestComponent.prototype, "requestMetrics", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JhiMetricsHttpRequestComponent.prototype, "updating", void 0);
JhiMetricsHttpRequestComponent = __decorate([
    Component({
        selector: 'jhi-metrics-request',
        template: `
        <h3 jhiTranslate="metrics.jvm.http.title">HTTP requests (time in millisecond)</h3>
        <table class="table table-striped" *ngIf="!updating">
            <thead>
                <tr>
                    <th jhiTranslate="metrics.jvm.http.table.code">Code</th>
                    <th jhiTranslate="metrics.jvm.http.table.count">Count</th>
                    <th class="text-right" jhiTranslate="metrics.jvm.http.table.mean">Mean</th>
                    <th class="text-right" jhiTranslate="metrics.jvm.http.table.max">Max</th>
                </tr>
            </thead>
            <tbody>
                <tr *ngFor="let entry of (requestMetrics['percode'] | keys)">
                    <td>{{ entry.key }}</td>
                    <td>
                        <ngb-progressbar
                            [max]="requestMetrics['all'].count"
                            [value]="entry.value.count"
                            [striped]="true"
                            [animated]="false"
                            type="success"
                        >
                            <span>{{ entry.value.count }}</span>
                        </ngb-progressbar>
                    </td>
                    <td class="text-right">
                        {{ filterNaN(entry.value.mean) | number: '1.0-2' }}
                    </td>
                    <td class="text-right">{{ entry.value.max | number: '1.0-2' }}</td>
                </tr>
            </tbody>
        </table>
    `
    })
], JhiMetricsHttpRequestComponent);

let JhiMetricsSystemComponent = class JhiMetricsSystemComponent {
    convertMillisecondsToDuration(ms) {
        const times = {
            year: 31557600000,
            month: 2629746000,
            day: 86400000,
            hour: 3600000,
            minute: 60000,
            second: 1000
        };
        let time_string = '';
        for (const key in times) {
            if (Math.floor(ms / times[key]) > 0) {
                let plural = '';
                if (Math.floor(ms / times[key]) > 1) {
                    plural = 's';
                }
                time_string += Math.floor(ms / times[key]).toString() + ' ' + key.toString() + plural + ' ';
                ms = ms - times[key] * Math.floor(ms / times[key]);
            }
        }
        return time_string;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], JhiMetricsSystemComponent.prototype, "systemMetrics", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], JhiMetricsSystemComponent.prototype, "updating", void 0);
JhiMetricsSystemComponent = __decorate([
    Component({
        selector: 'jhi-metrics-system',
        template: `
        <h4>System</h4>
        <div class="row" *ngIf="!updating">
            <div class="col-md-4">Uptime</div>
            <div class="col-md-8 text-right">{{ convertMillisecondsToDuration(systemMetrics['process.uptime']) }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-4">Start time</div>
            <div class="col-md-8 text-right">{{ systemMetrics['process.start.time'] | date: 'full' }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">Process CPU usage</div>
            <div class="col-md-3 text-right">{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</div>
        </div>
        <ngb-progressbar
            [value]="100 * systemMetrics['process.cpu.usage']"
            [striped]="true"
            [animated]="false"
            type="success"
            *ngIf="!updating"
        >
            <span>{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</span>
        </ngb-progressbar>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">System CPU usage</div>
            <div class="col-md-3 text-right">{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</div>
        </div>
        <ngb-progressbar
            [value]="100 * systemMetrics['system.cpu.usage']"
            [striped]="true"
            [animated]="false"
            type="success"
            *ngIf="!updating"
        >
            <span>{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</span>
        </ngb-progressbar>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">System CPU count</div>
            <div class="col-md-3 text-right">{{ systemMetrics['system.cpu.count'] }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">System 1m Load average</div>
            <div class="col-md-3 text-right">{{ systemMetrics['system.load.average.1m'] | number: '1.0-2' }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">Process files max</div>
            <div class="col-md-3 text-right">{{ systemMetrics['process.files.max'] | number: '1.0-0' }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">Process files open</div>
            <div class="col-md-3 text-right">{{ systemMetrics['process.files.open'] | number: '1.0-0' }}</div>
        </div>
    `
    })
], JhiMetricsSystemComponent);

let JhiCapitalizePipe = class JhiCapitalizePipe {
    transform(input) {
        if (input !== null) {
            input = input.toLowerCase();
        }
        return input.substring(0, 1).toUpperCase() + input.substring(1);
    }
};
JhiCapitalizePipe = __decorate([
    Pipe({ name: 'capitalize' })
], JhiCapitalizePipe);

let JhiFilterPipe = class JhiFilterPipe {
    transform(input, filter, field) {
        if (typeof filter === 'undefined') {
            return input;
        }
        // if filter is of type 'function' compute current value of filter, otherwise return filter
        const currentFilter = typeof filter === 'function' ? filter() : filter;
        if (typeof currentFilter === 'number') {
            return input.filter(this.filterByNumber(currentFilter, field));
        }
        if (typeof currentFilter === 'boolean') {
            return input.filter(this.filterByBoolean(currentFilter, field));
        }
        if (typeof currentFilter === 'string') {
            return input.filter(this.filterByString(currentFilter, field));
        }
        if (typeof currentFilter === 'object') {
            // filter by object ignores 'field' if specified
            return input.filter(this.filterByObject(currentFilter));
        }
        // 'symbol' && 'undefined'
        return input.filter(this.filterDefault(currentFilter, field));
    }
    filterByNumber(filter, field) {
        return value => (value && !filter) || (typeof value === 'object' && field)
            ? value[field] && typeof value[field] === 'number' && value[field] === filter
            : typeof value === 'number' && value === filter;
    }
    filterByBoolean(filter, field) {
        return value => typeof value === 'object' && field
            ? value[field] && typeof value[field] === 'boolean' && value[field] === filter
            : typeof value === 'boolean' && value === filter;
    }
    filterByString(filter, field) {
        return value => (value && !filter) || (typeof value === 'object' && field)
            ? value[field] && typeof value[field] === 'string' && value[field] === filter
            : typeof value === 'string' && value.toLowerCase().includes(filter.toLowerCase());
    }
    filterDefault(filter, field) {
        return value => ((value && !filter) || (typeof value === 'object' && field) ? value[field] && filter === value : filter === value);
    }
    filterByObject(filter) {
        return value => {
            const keys = Object.keys(filter);
            let isMatching = false;
            // all fields defined in filter object must match
            for (const key of keys) {
                if (typeof filter[key] === 'number') {
                    isMatching = this.filterByNumber(filter[key])(value[key]);
                }
                else if (typeof filter[key] === 'boolean') {
                    isMatching = this.filterByBoolean(filter[key])(value[key]);
                }
                else if (typeof filter[key] === 'string') {
                    isMatching = this.filterByString(filter[key])(value[key]);
                }
                else {
                    isMatching = this.filterDefault(filter[key])(value[key]);
                }
            }
            return isMatching;
        };
    }
};
JhiFilterPipe = __decorate([
    Pipe({ name: 'filter', pure: false })
], JhiFilterPipe);

let JhiKeysPipe = class JhiKeysPipe {
    transform(value) {
        const keys = [];
        const valueKeys = Object.keys(value);
        for (const key of valueKeys) {
            keys.push({ key, value: value[key] });
        }
        return keys;
    }
};
JhiKeysPipe = __decorate([
    Pipe({ name: 'keys' })
], JhiKeysPipe);

let JhiOrderByPipe = class JhiOrderByPipe {
    transform(values, predicate = '', reverse = false) {
        if (predicate === '') {
            return reverse ? values.sort().reverse() : values.sort();
        }
        return values.sort((a, b) => {
            if (a[predicate] < b[predicate]) {
                return reverse ? 1 : -1;
            }
            else if (b[predicate] < a[predicate]) {
                return reverse ? -1 : 1;
            }
            return 0;
        });
    }
};
JhiOrderByPipe = __decorate([
    Pipe({ name: 'orderBy' })
], JhiOrderByPipe);

let JhiPureFilterPipe = class JhiPureFilterPipe extends JhiFilterPipe {
    transform(input, filter, field) {
        return super.transform(input, filter, field);
    }
};
JhiPureFilterPipe = __decorate([
    Pipe({ name: 'pureFilter' })
], JhiPureFilterPipe);

let JhiTruncateCharactersPipe = class JhiTruncateCharactersPipe {
    transform(input, chars, breakOnWord) {
        if (isNaN(chars)) {
            return input;
        }
        if (chars <= 0) {
            return '';
        }
        if (input && input.length > chars) {
            input = input.substring(0, chars);
            if (!breakOnWord) {
                const lastspace = input.lastIndexOf(' ');
                // Get last space
                if (lastspace !== -1) {
                    input = input.substr(0, lastspace);
                }
            }
            else {
                while (input.charAt(input.length - 1) === ' ') {
                    input = input.substr(0, input.length - 1);
                }
            }
            return input + '...';
        }
        return input;
    }
};
JhiTruncateCharactersPipe = __decorate([
    Pipe({ name: 'truncateCharacters' })
], JhiTruncateCharactersPipe);

let JhiTruncateWordsPipe = class JhiTruncateWordsPipe {
    transform(input, words) {
        if (isNaN(words)) {
            return input;
        }
        if (words <= 0) {
            return '';
        }
        if (input) {
            const inputWords = input.split(/\s+/);
            if (inputWords.length > words) {
                input = inputWords.slice(0, words).join(' ') + '...';
            }
        }
        return input;
    }
};
JhiTruncateWordsPipe = __decorate([
    Pipe({ name: 'truncateWords' })
], JhiTruncateWordsPipe);

/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
const JHI_PIPES = [
    JhiCapitalizePipe,
    JhiFilterPipe,
    JhiKeysPipe,
    JhiOrderByPipe,
    JhiPureFilterPipe,
    JhiTruncateCharactersPipe,
    JhiTruncateWordsPipe
];
const JHI_DIRECTIVES = [
    JhiMaxValidatorDirective,
    JhiMinValidatorDirective,
    JhiMaxbytesValidatorDirective,
    JhiMinbytesValidatorDirective,
    JhiSortDirective,
    JhiSortByDirective
];
const JHI_COMPONENTS = [
    JhiItemCountComponent,
    JhiBooleanComponent,
    JhiJvmMemoryComponent,
    JhiJvmThreadsComponent,
    JhiMetricsHttpRequestComponent,
    JhiMetricsEndpointsRequestsComponent,
    JhiMetricsCacheComponent,
    JhiMetricsDatasourceComponent,
    JhiMetricsSystemComponent,
    JhiMetricsGarbageCollectorComponent,
    JhiThreadModalComponent
];

let JhiAlertService = class JhiAlertService {
    constructor(sanitizer, configService, translateService) {
        this.sanitizer = sanitizer;
        this.configService = configService;
        this.translateService = translateService;
        const config = this.configService.getConfig();
        this.toast = config.alertAsToast;
        this.i18nEnabled = config.i18nEnabled;
        this.alertId = 0; // unique id for each alert. Starts from 0.
        this.alerts = [];
        this.timeout = config.alertTimeout;
    }
    clear() {
        this.alerts.splice(0, this.alerts.length);
    }
    get() {
        return this.alerts;
    }
    success(msg, params, position) {
        return this.addAlert({
            type: 'success',
            msg,
            params,
            timeout: this.timeout,
            toast: this.isToast(),
            position
        }, []);
    }
    error(msg, params, position) {
        return this.addAlert({
            type: 'danger',
            msg,
            params,
            timeout: this.timeout,
            toast: this.isToast(),
            position
        }, []);
    }
    warning(msg, params, position) {
        return this.addAlert({
            type: 'warning',
            msg,
            params,
            timeout: this.timeout,
            toast: this.isToast(),
            position
        }, []);
    }
    info(msg, params, position) {
        return this.addAlert({
            type: 'info',
            msg,
            params,
            timeout: this.timeout,
            toast: this.isToast(),
            position
        }, []);
    }
    addAlert(alertOptions, extAlerts) {
        alertOptions.id = this.alertId++;
        if (this.i18nEnabled && alertOptions.msg) {
            alertOptions.msg = this.translateService.instant(alertOptions.msg, alertOptions.params);
        }
        const alert = this.factory(alertOptions);
        if (alertOptions.timeout && alertOptions.timeout > 0) {
            setTimeout(() => {
                this.closeAlert(alertOptions.id, extAlerts);
            }, alertOptions.timeout);
        }
        return alert;
    }
    closeAlert(id, extAlerts) {
        const thisAlerts = extAlerts && extAlerts.length > 0 ? extAlerts : this.alerts;
        return this.closeAlertByIndex(thisAlerts.map(e => e.id).indexOf(id), thisAlerts);
    }
    closeAlertByIndex(index, thisAlerts) {
        return thisAlerts.splice(index, 1);
    }
    isToast() {
        return this.toast;
    }
    factory(alertOptions) {
        const alert = {
            type: alertOptions.type,
            msg: this.sanitizer.sanitize(SecurityContext.HTML, alertOptions.msg),
            id: alertOptions.id,
            timeout: alertOptions.timeout,
            toast: alertOptions.toast,
            position: alertOptions.position ? alertOptions.position : 'top right',
            scoped: alertOptions.scoped,
            close: (alerts) => {
                return this.closeAlert(alertOptions.id, alerts);
            }
        };
        if (!alert.scoped) {
            this.alerts.push(alert);
        }
        return alert;
    }
};
JhiAlertService.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiAlertService_Factory() { return new JhiAlertService(ɵɵinject(Sanitizer), ɵɵinject(JhiConfigService), ɵɵinject(TranslateService)); }, token: JhiAlertService, providedIn: "root" });
JhiAlertService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [Sanitizer, JhiConfigService, TranslateService])
], JhiAlertService);

/**
 * An utility service for pagination
 */
let JhiPaginationUtil = class JhiPaginationUtil {
    constructor() { }
    /**
     * Method to find whether the sort is defined
     */
    parseAscending(sort) {
        let sortArray = sort.split(',');
        sortArray = sortArray.length > 1 ? sortArray : sort.split('%2C');
        if (sortArray.length > 1) {
            return sortArray.slice(-1)[0] === 'asc';
        }
        // default to true if no sort is defined
        return true;
    }
    /**
     * Method to query params are strings, and need to be parsed
     */
    parsePage(page) {
        return parseInt(page, 10);
    }
    /**
     * Method to sort can be in the format `id,asc` or `id`
     */
    parsePredicate(sort) {
        return sort.split(',')[0].split('%2C')[0];
    }
};
JhiPaginationUtil.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiPaginationUtil_Factory() { return new JhiPaginationUtil(); }, token: JhiPaginationUtil, providedIn: "root" });
JhiPaginationUtil = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [])
], JhiPaginationUtil);

let JhiResolvePagingParams = class JhiResolvePagingParams {
    constructor(paginationUtil) {
        this.paginationUtil = paginationUtil;
    }
    resolve(route, state) {
        const page = route.queryParams['page'] ? route.queryParams['page'] : '1';
        const defaultSort = route.data['defaultSort'] ? route.data['defaultSort'] : 'id,asc';
        const sort = route.queryParams['sort'] ? route.queryParams['sort'] : defaultSort;
        return {
            page: this.paginationUtil.parsePage(page),
            predicate: this.paginationUtil.parsePredicate(sort),
            ascending: this.paginationUtil.parseAscending(sort)
        };
    }
};
JhiResolvePagingParams.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiResolvePagingParams_Factory() { return new JhiResolvePagingParams(ɵɵinject(JhiPaginationUtil)); }, token: JhiResolvePagingParams, providedIn: "root" });
JhiResolvePagingParams = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [JhiPaginationUtil])
], JhiResolvePagingParams);

var NgJhipsterModule_1;
function translatePartialLoader(http) {
    return new TranslateHttpLoader(http, 'i18n/', `.json?buildTimestamp=${process.env.BUILD_TIMESTAMP}`);
}
function missingTranslationHandler(configService) {
    return new JhiMissingTranslationHandler(configService);
}
let NgJhipsterModule = NgJhipsterModule_1 = class NgJhipsterModule {
    static forRoot(moduleConfig) {
        return {
            ngModule: NgJhipsterModule_1,
            providers: [
                {
                    provide: JhiLanguageService,
                    useClass: JhiLanguageService,
                    deps: [TranslateService, JhiConfigService]
                },
                {
                    provide: JhiResolvePagingParams,
                    useClass: JhiResolvePagingParams,
                    deps: [JhiPaginationUtil]
                },
                {
                    provide: JhiAlertService,
                    useClass: JhiAlertService,
                    deps: [Sanitizer, JhiConfigService, TranslateService]
                },
                { provide: JhiModuleConfig, useValue: moduleConfig },
                {
                    provide: JhiConfigService,
                    useClass: JhiConfigService,
                    deps: [JhiModuleConfig]
                }
            ]
        };
    }
    static forChild(moduleConfig) {
        return {
            ngModule: NgJhipsterModule_1,
            providers: [{ provide: JhiModuleConfig, useValue: moduleConfig }]
        };
    }
};
NgJhipsterModule = NgJhipsterModule_1 = __decorate([
    NgModule({
        imports: [
            CommonModule,
            TranslateModule.forRoot({
                loader: {
                    provide: TranslateLoader,
                    useFactory: translatePartialLoader,
                    deps: [HttpClient]
                },
                missingTranslationHandler: {
                    provide: MissingTranslationHandler,
                    useFactory: missingTranslationHandler,
                    deps: [JhiConfigService]
                }
            }),
            CommonModule,
            NgbModule.forRoot(),
            FormsModule
        ],
        declarations: [...JHI_PIPES, ...JHI_DIRECTIVES, ...JHI_COMPONENTS, JhiTranslateDirective],
        entryComponents: [JhiThreadModalComponent],
        exports: [...JHI_PIPES, ...JHI_DIRECTIVES, ...JHI_COMPONENTS, JhiTranslateDirective, TranslateModule, CommonModule]
    })
], NgJhipsterModule);

/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * An utility service for link parsing.
 */
let JhiParseLinks = class JhiParseLinks {
    constructor() { }
    /**
     * Method to parse the links
     */
    parse(header) {
        if (header.length === 0) {
            throw new Error('input must not be of zero length');
        }
        // Split parts by comma
        const parts = header.split(',');
        const links = {};
        // Parse each part into a named link
        parts.forEach(p => {
            const section = p.split(';');
            if (section.length !== 2) {
                throw new Error('section could not be split on ";"');
            }
            const url = section[0].replace(/<(.*)>/, '$1').trim();
            const queryString = {};
            url.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), ($0, $1, $2, $3) => (queryString[$1] = $3));
            let page = queryString.page;
            if (typeof page === 'string') {
                page = parseInt(page, 10);
            }
            const name = section[1].replace(/rel="(.*)"/, '$1').trim();
            links[name] = page;
        });
        return links;
    }
};
JhiParseLinks.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiParseLinks_Factory() { return new JhiParseLinks(); }, token: JhiParseLinks, providedIn: "root" });
JhiParseLinks = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [])
], JhiParseLinks);

/**
 * An utility service for data.
 */
let JhiDataUtils = class JhiDataUtils {
    constructor() { }
    /**
     * Method to abbreviate the text given
     */
    abbreviate(text, append = '...') {
        if (text.length < 30) {
            return text;
        }
        return text ? text.substring(0, 15) + append + text.slice(-10) : '';
    }
    /**
     * Method to find the byte size of the string provides
     */
    byteSize(base64String) {
        return this.formatAsBytes(this.size(base64String));
    }
    /**
     * Method to open file
     */
    openFile(contentType, data) {
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            // To support IE and Edge
            const byteCharacters = atob(data);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            const blob = new Blob([byteArray], {
                type: contentType
            });
            window.navigator.msSaveOrOpenBlob(blob);
        }
        else {
            // Other browsers
            const fileURL = `data:${contentType};base64,${data}`;
            const win = window.open();
            win.document.write('<iframe src="' +
                fileURL +
                '" frameborder="0" style="border:0; top:0; left:0; bottom:0; right:0; width:100%; height:100%;" allowfullscreen></iframe>');
        }
    }
    /**
     * Method to convert the file to base64
     */
    toBase64(file, cb) {
        const fileReader = new FileReader();
        fileReader.onload = function (e) {
            const base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);
            cb(base64Data);
        };
        fileReader.readAsDataURL(file);
    }
    /**
     * Method to clear the input
     */
    clearInputImage(entity, elementRef, field, fieldContentType, idInput) {
        if (entity && field && fieldContentType) {
            if (entity.hasOwnProperty(field)) {
                entity[field] = null;
            }
            if (entity.hasOwnProperty(fieldContentType)) {
                entity[fieldContentType] = null;
            }
            if (elementRef && idInput && elementRef.nativeElement.querySelector('#' + idInput)) {
                elementRef.nativeElement.querySelector('#' + idInput).value = null;
            }
        }
    }
    /**
     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object
     * and returns a promise.
     *
     * @param event the object containing the file (at event.target.files[0])
     * @param entity the object to set the file's 'base 64 data' and 'file type' on
     * @param field the field name to set the file's 'base 64 data' on
     * @param isImage boolean representing if the file represented by the event is an image
     * @returns a promise that resolves to the modified entity if operation is successful, otherwise rejects with an error message
     */
    setFileData(event, entity, field, isImage) {
        return new Promise((resolve, reject) => {
            if (event && event.target && event.target.files && event.target.files[0]) {
                const file = event.target.files[0];
                if (isImage && !/^image\//.test(file.type)) {
                    reject(`File was expected to be an image but was found to be ${file.type}`);
                }
                else {
                    this.toBase64(file, base64Data => {
                        entity[field] = base64Data;
                        entity[`${field}ContentType`] = file.type;
                        resolve(entity);
                    });
                }
            }
            else {
                reject(`Base64 data was not set as file could not be extracted from passed parameter: ${event}`);
            }
        });
    }
    /**
     * Method to download file
     */
    downloadFile(contentType, data, fileName) {
        const byteCharacters = atob(data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], {
            type: contentType
        });
        const tempLink = document.createElement('a');
        tempLink.href = window.URL.createObjectURL(blob);
        tempLink.download = fileName;
        tempLink.target = '_blank';
        tempLink.click();
    }
    endsWith(suffix, str) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }
    paddingSize(value) {
        if (this.endsWith('==', value)) {
            return 2;
        }
        if (this.endsWith('=', value)) {
            return 1;
        }
        return 0;
    }
    size(value) {
        return (value.length / 4) * 3 - this.paddingSize(value);
    }
    formatAsBytes(size) {
        return size.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' bytes';
    }
};
JhiDataUtils.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiDataUtils_Factory() { return new JhiDataUtils(); }, token: JhiDataUtils, providedIn: "root" });
JhiDataUtils = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [])
], JhiDataUtils);

/**
 * An utility service for date.
 */
let JhiDateUtils = class JhiDateUtils {
    constructor() {
        this.pattern = 'yyyy-MM-dd';
        this.datePipe = new DatePipe('en');
    }
    /**
     * Method to convert the date time from server into JS date object
     */
    convertDateTimeFromServer(date) {
        if (date) {
            return new Date(date);
        }
        else {
            return null;
        }
    }
    /**
     * Method to convert the date from server into JS date object
     */
    convertLocalDateFromServer(date) {
        if (date) {
            const dateString = date.split('-');
            return new Date(dateString[0], dateString[1] - 1, dateString[2]);
        }
        return null;
    }
    /**
     * Method to convert the JS date object into specified date pattern
     */
    convertLocalDateToServer(date, pattern = this.pattern) {
        if (date) {
            const newDate = new Date(date.year, date.month - 1, date.day);
            return this.datePipe.transform(newDate, pattern);
        }
        else {
            return null;
        }
    }
    /**
     * Method to get the default date pattern
     */
    dateformat() {
        return this.pattern;
    }
    // TODO Change this method when moving from datetime-local input to NgbDatePicker
    toDate(date) {
        if (date === undefined || date === null) {
            return null;
        }
        const dateParts = date.split(/\D+/);
        if (dateParts.length === 7) {
            return new Date(dateParts[0], dateParts[1] - 1, dateParts[2], dateParts[3], dateParts[4], dateParts[5], dateParts[6]);
        }
        if (dateParts.length === 6) {
            return new Date(dateParts[0], dateParts[1] - 1, dateParts[2], dateParts[3], dateParts[4], dateParts[5]);
        }
        return new Date(dateParts[0], dateParts[1] - 1, dateParts[2], dateParts[3], dateParts[4]);
    }
};
JhiDateUtils.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiDateUtils_Factory() { return new JhiDateUtils(); }, token: JhiDateUtils, providedIn: "root" });
JhiDateUtils = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [])
], JhiDateUtils);

/**
 * An utility class to manage RX events
 */
let JhiEventManager = class JhiEventManager {
    constructor() {
        this.observable = Observable.create((observer) => {
            this.observer = observer;
        }).pipe(share());
    }
    /**
     * Method to broadcast the event to observer
     */
    broadcast(event) {
        if (this.observer != null) {
            this.observer.next(event);
        }
    }
    /**
     * Method to subscribe to an event with callback
     */
    subscribe(eventName, callback) {
        const subscriber = this.observable
            .pipe(filter(event => {
            return event.name === eventName;
        }))
            .subscribe(callback);
        return subscriber;
    }
    /**
     * Method to unsubscribe the subscription
     */
    destroy(subscriber) {
        subscriber.unsubscribe();
    }
};
JhiEventManager.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiEventManager_Factory() { return new JhiEventManager(); }, token: JhiEventManager, providedIn: "root" });
JhiEventManager = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [])
], JhiEventManager);

let JhiBase64Service = class JhiBase64Service {
    constructor() {
        this.keyStr = 'ABCDEFGHIJKLMNOP' + 'QRSTUVWXYZabcdef' + 'ghijklmnopqrstuv' + 'wxyz0123456789+/' + '=';
    }
    encode(input) {
        let output = '';
        let enc1 = '';
        let enc2 = '';
        let enc3 = '';
        let enc4 = '';
        let chr1 = '';
        let chr2 = '';
        let chr3 = '';
        let i = 0;
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output + this.keyStr.charAt(enc1) + this.keyStr.charAt(enc2) + this.keyStr.charAt(enc3) + this.keyStr.charAt(enc4);
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
        }
        return output;
    }
    decode(input) {
        let output = '';
        let enc1 = '';
        let enc2 = '';
        let enc3 = '';
        let enc4 = '';
        let chr1 = '';
        let chr2 = '';
        let chr3 = '';
        let i = 0;
        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
        while (i < input.length) {
            enc1 = this.keyStr.indexOf(input.charAt(i++));
            enc2 = this.keyStr.indexOf(input.charAt(i++));
            enc3 = this.keyStr.indexOf(input.charAt(i++));
            enc4 = this.keyStr.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 !== 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 !== 64) {
                output = output + String.fromCharCode(chr3);
            }
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
        }
        return output;
    }
};
JhiBase64Service.ngInjectableDef = ɵɵdefineInjectable({ factory: function JhiBase64Service_Factory() { return new JhiBase64Service(); }, token: JhiBase64Service, providedIn: "root" });
JhiBase64Service = __decorate([
    Injectable({
        providedIn: 'root'
    })
], JhiBase64Service);

/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * Generated bundle index. Do not edit.
 */

export { JhiAlertService, JhiBase64Service, JhiBooleanComponent, JhiCapitalizePipe, JhiConfigService, JhiDataUtils, JhiDateUtils, JhiEventManager, JhiFilterPipe, JhiItemCountComponent, JhiKeysPipe, JhiLanguageService, JhiMaxValidatorDirective, JhiMaxbytesValidatorDirective, JhiMinValidatorDirective, JhiMinbytesValidatorDirective, JhiMissingTranslationHandler, JhiModuleConfig, JhiOrderByPipe, JhiPaginationUtil, JhiParseLinks, JhiPureFilterPipe, JhiResolvePagingParams, JhiSortByDirective, JhiSortDirective, JhiTranslateDirective, JhiTruncateCharactersPipe, JhiTruncateWordsPipe, NgJhipsterModule, missingTranslationHandler, translatePartialLoader, JHI_PIPES as ɵa, JHI_DIRECTIVES as ɵb, JHI_COMPONENTS as ɵc, JhiJvmMemoryComponent as ɵd, JhiJvmThreadsComponent as ɵe, JhiMetricsHttpRequestComponent as ɵf, JhiMetricsEndpointsRequestsComponent as ɵg, JhiMetricsCacheComponent as ɵh, JhiMetricsDatasourceComponent as ɵi, JhiMetricsSystemComponent as ɵj, JhiMetricsGarbageCollectorComponent as ɵk, JhiThreadModalComponent as ɵl };
//# sourceMappingURL=ng-jhipster.js.map
