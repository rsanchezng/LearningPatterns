import * as tslib_1 from "tslib";
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Component, Input } from '@angular/core';
let JhiMetricsSystemComponent = class JhiMetricsSystemComponent {
    convertMillisecondsToDuration(ms) {
        const times = {
            year: 31557600000,
            month: 2629746000,
            day: 86400000,
            hour: 3600000,
            minute: 60000,
            second: 1000
        };
        let timeString = '';
        for (const key in times) {
            if (Math.floor(ms / times[key]) > 0) {
                let plural = '';
                if (Math.floor(ms / times[key]) > 1) {
                    plural = 's';
                }
                timeString += Math.floor(ms / times[key]).toString() + ' ' + key.toString() + plural + ' ';
                ms = ms - times[key] * Math.floor(ms / times[key]);
            }
        }
        return timeString;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], JhiMetricsSystemComponent.prototype, "systemMetrics", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], JhiMetricsSystemComponent.prototype, "updating", void 0);
JhiMetricsSystemComponent = tslib_1.__decorate([
    Component({
        selector: 'jhi-metrics-system',
        template: `
        <h4>System</h4>
        <div class="row" *ngIf="!updating">
            <div class="col-md-4">Uptime</div>
            <div class="col-md-8 text-right">{{ convertMillisecondsToDuration(systemMetrics['process.uptime']) }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-4">Start time</div>
            <div class="col-md-8 text-right">{{ systemMetrics['process.start.time'] | date: 'full' }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">Process CPU usage</div>
            <div class="col-md-3 text-right">{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</div>
        </div>
        <ngb-progressbar
            [value]="100 * systemMetrics['process.cpu.usage']"
            [striped]="true"
            [animated]="false"
            type="success"
            *ngIf="!updating"
        >
            <span>{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</span>
        </ngb-progressbar>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">System CPU usage</div>
            <div class="col-md-3 text-right">{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</div>
        </div>
        <ngb-progressbar
            [value]="100 * systemMetrics['system.cpu.usage']"
            [striped]="true"
            [animated]="false"
            type="success"
            *ngIf="!updating"
        >
            <span>{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</span>
        </ngb-progressbar>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">System CPU count</div>
            <div class="col-md-3 text-right">{{ systemMetrics['system.cpu.count'] }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">System 1m Load average</div>
            <div class="col-md-3 text-right">{{ systemMetrics['system.load.average.1m'] | number: '1.0-2' }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">Process files max</div>
            <div class="col-md-3 text-right">{{ systemMetrics['process.files.max'] | number: '1.0-0' }}</div>
        </div>
        <div class="row" *ngIf="!updating">
            <div class="col-md-9">Process files open</div>
            <div class="col-md-3 text-right">{{ systemMetrics['process.files.open'] | number: '1.0-0' }}</div>
        </div>
    `
    })
], JhiMetricsSystemComponent);
export { JhiMetricsSystemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamhpLW1ldHJpY3Mtc3lzdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWpoaXBzdGVyLyIsInNvdXJjZXMiOlsiY29tcG9uZW50L21ldHJpY3MvamhpLW1ldHJpY3Mtc3lzdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0gsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUEwRGpELElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBV2xDLDZCQUE2QixDQUFDLEVBQUU7UUFDNUIsTUFBTSxLQUFLLEdBQUc7WUFDVixJQUFJLEVBQUUsV0FBVztZQUNqQixLQUFLLEVBQUUsVUFBVTtZQUNqQixHQUFHLEVBQUUsUUFBUTtZQUNiLElBQUksRUFBRSxPQUFPO1lBQ2IsTUFBTSxFQUFFLEtBQUs7WUFDYixNQUFNLEVBQUUsSUFBSTtTQUNmLENBQUM7UUFDRixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDcEIsS0FBSyxNQUFNLEdBQUcsSUFBSSxLQUFLLEVBQUU7WUFDckIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2pDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztnQkFDaEIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ2pDLE1BQU0sR0FBRyxHQUFHLENBQUM7aUJBQ2hCO2dCQUNELFVBQVUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUM7Z0JBQzNGLEVBQUUsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3REO1NBQ0o7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0NBQ0osQ0FBQTtBQTdCWTtJQUFSLEtBQUssRUFBRTs7Z0VBQW1CO0FBS2xCO0lBQVIsS0FBSyxFQUFFOzsyREFBbUI7QUFUbEIseUJBQXlCO0lBeERyQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsb0JBQW9CO1FBQzlCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQW9EVDtLQUNKLENBQUM7R0FDVyx5QkFBeUIsQ0FpQ3JDO1NBakNZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gQ29weXJpZ2h0IDIwMTMtMjAxOSB0aGUgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMgZnJvbSB0aGUgSkhpcHN0ZXIgcHJvamVjdC5cblxuIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBKSGlwc3RlciBwcm9qZWN0LCBzZWUgaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9cbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cblxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2poaS1tZXRyaWNzLXN5c3RlbScsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGg0PlN5c3RlbTwvaDQ+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIiAqbmdJZj1cIiF1cGRhdGluZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC00XCI+VXB0aW1lPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTggdGV4dC1yaWdodFwiPnt7IGNvbnZlcnRNaWxsaXNlY29uZHNUb0R1cmF0aW9uKHN5c3RlbU1ldHJpY3NbJ3Byb2Nlc3MudXB0aW1lJ10pIH19PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCIgKm5nSWY9XCIhdXBkYXRpbmdcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtNFwiPlN0YXJ0IHRpbWU8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtOCB0ZXh0LXJpZ2h0XCI+e3sgc3lzdGVtTWV0cmljc1sncHJvY2Vzcy5zdGFydC50aW1lJ10gfCBkYXRlOiAnZnVsbCcgfX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIiAqbmdJZj1cIiF1cGRhdGluZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC05XCI+UHJvY2VzcyBDUFUgdXNhZ2U8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMyB0ZXh0LXJpZ2h0XCI+e3sgMTAwICogc3lzdGVtTWV0cmljc1sncHJvY2Vzcy5jcHUudXNhZ2UnXSB8IG51bWJlcjogJzEuMC0yJyB9fSAlPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8bmdiLXByb2dyZXNzYmFyXG4gICAgICAgICAgICBbdmFsdWVdPVwiMTAwICogc3lzdGVtTWV0cmljc1sncHJvY2Vzcy5jcHUudXNhZ2UnXVwiXG4gICAgICAgICAgICBbc3RyaXBlZF09XCJ0cnVlXCJcbiAgICAgICAgICAgIFthbmltYXRlZF09XCJmYWxzZVwiXG4gICAgICAgICAgICB0eXBlPVwic3VjY2Vzc1wiXG4gICAgICAgICAgICAqbmdJZj1cIiF1cGRhdGluZ1wiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuPnt7IDEwMCAqIHN5c3RlbU1ldHJpY3NbJ3Byb2Nlc3MuY3B1LnVzYWdlJ10gfCBudW1iZXI6ICcxLjAtMicgfX0gJTwvc3Bhbj5cbiAgICAgICAgPC9uZ2ItcHJvZ3Jlc3NiYXI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIiAqbmdJZj1cIiF1cGRhdGluZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC05XCI+U3lzdGVtIENQVSB1c2FnZTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0zIHRleHQtcmlnaHRcIj57eyAxMDAgKiBzeXN0ZW1NZXRyaWNzWydzeXN0ZW0uY3B1LnVzYWdlJ10gfCBudW1iZXI6ICcxLjAtMicgfX0gJTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPG5nYi1wcm9ncmVzc2JhclxuICAgICAgICAgICAgW3ZhbHVlXT1cIjEwMCAqIHN5c3RlbU1ldHJpY3NbJ3N5c3RlbS5jcHUudXNhZ2UnXVwiXG4gICAgICAgICAgICBbc3RyaXBlZF09XCJ0cnVlXCJcbiAgICAgICAgICAgIFthbmltYXRlZF09XCJmYWxzZVwiXG4gICAgICAgICAgICB0eXBlPVwic3VjY2Vzc1wiXG4gICAgICAgICAgICAqbmdJZj1cIiF1cGRhdGluZ1wiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuPnt7IDEwMCAqIHN5c3RlbU1ldHJpY3NbJ3N5c3RlbS5jcHUudXNhZ2UnXSB8IG51bWJlcjogJzEuMC0yJyB9fSAlPC9zcGFuPlxuICAgICAgICA8L25nYi1wcm9ncmVzc2Jhcj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiICpuZ0lmPVwiIXVwZGF0aW5nXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTlcIj5TeXN0ZW0gQ1BVIGNvdW50PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTMgdGV4dC1yaWdodFwiPnt7IHN5c3RlbU1ldHJpY3NbJ3N5c3RlbS5jcHUuY291bnQnXSB9fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiICpuZ0lmPVwiIXVwZGF0aW5nXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTlcIj5TeXN0ZW0gMW0gTG9hZCBhdmVyYWdlPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTMgdGV4dC1yaWdodFwiPnt7IHN5c3RlbU1ldHJpY3NbJ3N5c3RlbS5sb2FkLmF2ZXJhZ2UuMW0nXSB8IG51bWJlcjogJzEuMC0yJyB9fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiICpuZ0lmPVwiIXVwZGF0aW5nXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTlcIj5Qcm9jZXNzIGZpbGVzIG1heDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0zIHRleHQtcmlnaHRcIj57eyBzeXN0ZW1NZXRyaWNzWydwcm9jZXNzLmZpbGVzLm1heCddIHwgbnVtYmVyOiAnMS4wLTAnIH19PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCIgKm5nSWY9XCIhdXBkYXRpbmdcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtOVwiPlByb2Nlc3MgZmlsZXMgb3BlbjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0zIHRleHQtcmlnaHRcIj57eyBzeXN0ZW1NZXRyaWNzWydwcm9jZXNzLmZpbGVzLm9wZW4nXSB8IG51bWJlcjogJzEuMC0wJyB9fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICBgXG59KVxuZXhwb3J0IGNsYXNzIEpoaU1ldHJpY3NTeXN0ZW1Db21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIG9iamVjdCBjb250YWluaW5nIHRocmVhZCByZWxhdGVkIG1ldHJpY3NcbiAgICAgKi9cbiAgICBASW5wdXQoKSBzeXN0ZW1NZXRyaWNzOiB7fTtcblxuICAgIC8qKlxuICAgICAqIGJvb2xlYW4gZmllbGQgc2F5aW5nIGlmIHRoZSBtZXRyaWNzIGFyZSBpbiB0aGUgcHJvY2VzcyBvZiBiZWluZyB1cGRhdGVkXG4gICAgICovXG4gICAgQElucHV0KCkgdXBkYXRpbmc6IGJvb2xlYW47XG5cbiAgICBjb252ZXJ0TWlsbGlzZWNvbmRzVG9EdXJhdGlvbihtcykge1xuICAgICAgICBjb25zdCB0aW1lcyA9IHtcbiAgICAgICAgICAgIHllYXI6IDMxNTU3NjAwMDAwLFxuICAgICAgICAgICAgbW9udGg6IDI2Mjk3NDYwMDAsXG4gICAgICAgICAgICBkYXk6IDg2NDAwMDAwLFxuICAgICAgICAgICAgaG91cjogMzYwMDAwMCxcbiAgICAgICAgICAgIG1pbnV0ZTogNjAwMDAsXG4gICAgICAgICAgICBzZWNvbmQ6IDEwMDBcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHRpbWVTdHJpbmcgPSAnJztcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGltZXMpIHtcbiAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKG1zIC8gdGltZXNba2V5XSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBsdXJhbCA9ICcnO1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKG1zIC8gdGltZXNba2V5XSkgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsdXJhbCA9ICdzJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGltZVN0cmluZyArPSBNYXRoLmZsb29yKG1zIC8gdGltZXNba2V5XSkudG9TdHJpbmcoKSArICcgJyArIGtleS50b1N0cmluZygpICsgcGx1cmFsICsgJyAnO1xuICAgICAgICAgICAgICAgIG1zID0gbXMgLSB0aW1lc1trZXldICogTWF0aC5mbG9vcihtcyAvIHRpbWVzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aW1lU3RyaW5nO1xuICAgIH1cbn1cbiJdfQ==